[
    {
        "filename": "ZOOKEEPER-1864.json",
        "creation_time": "2014-01-20T06:09:53.000+0000",
        "bug_report": {
            "Title": "NullPointerException in QuorumPeer.setQuorumVerifier",
            "Description": "A NullPointerException occurs in the QuorumPeer class when attempting to set the quorum verifier. This issue arises when the quorum verifier is not properly initialized before being accessed, leading to a failure in the setQuorumVerifier method.",
            "StackTrace": [
                "java.lang.NullPointerException",
                "at org.apache.zookeeper.server.quorum.QuorumPeer.setQuorumVerifier(QuorumPeer.java:1320)",
                "at org.apache.zookeeper.server.quorum.QuorumPeerMain.runFromConfig(QuorumPeerMain.java:156)",
                "at org.apache.curator.test.TestingZooKeeperServer$1.run(TestingZooKeeperServer.java:134)",
                "at java.lang.Thread.run(Thread.java:722)"
            ],
            "StepsToReproduce": [
                "1. Start the ZooKeeper server with a configuration that does not properly initialize the quorum verifier.",
                "2. Attempt to run the server, which will invoke the runFromConfig method.",
                "3. Observe the NullPointerException thrown during the execution."
            ],
            "ExpectedBehavior": "The quorum verifier should be properly initialized and set without throwing a NullPointerException.",
            "ObservedBehavior": "A NullPointerException is thrown when the setQuorumVerifier method is called, indicating that the quorum verifier is null.",
            "AdditionalDetails": "The issue likely stems from the fact that the quorum verifier is not being set correctly in the configuration, or the configuration is missing necessary parameters. Ensure that the QuorumVerifier is initialized before calling setQuorumVerifier."
        }
    },
    {
        "filename": "ZOOKEEPER-2213.json",
        "creation_time": "2015-06-10T15:29:23.000+0000",
        "bug_report": {
            "Title": "IllegalArgumentException: Invalid path in PathTrie.findMaxPrefix",
            "Description": "An IllegalArgumentException is thrown when the method findMaxPrefix is called with an invalid path. This occurs during the initialization of the ZooKeeper server when it attempts to load the database and process transactions.",
            "StackTrace": [
                "java.lang.IllegalArgumentException: Invalid path",
                "at org.apache.zookeeper.common.PathTrie.findMaxPrefix(PathTrie.java:259)",
                "at org.apache.zookeeper.server.DataTree.getMaxPrefixWithQuota(DataTree.java:634)",
                "at org.apache.zookeeper.server.DataTree.setData(DataTree.java:616)",
                "at org.apache.zookeeper.server.DataTree.processTxn(DataTree.java:807)",
                "at org.apache.zookeeper.server.persistence.FileTxnSnapLog.processTransaction(FileTxnSnapLog.java:198)",
                "at org.apache.zookeeper.server.persistence.FileTxnSnapLog.restore(FileTxnSnapLog.java:151)",
                "at org.apache.zookeeper.server.ZKDatabase.loadDataBase(ZKDatabase.java:223)",
                "at org.apache.zookeeper.server.ZooKeeperServer.loadData(ZooKeeperServer.java:250)",
                "at org.apache.zookeeper.server.ZooKeeperServer.startdata(ZooKeeperServer.java:377)",
                "at org.apache.zookeeper.server.NIOServerCnxnFactory.startup(NIOServerCnxnFactory.java:122)",
                "at org.apache.zookeeper.server.ZooKeeperServerMain.runFromConfig(ZooKeeperServerMain.java:112)",
                "at org.apache.zookeeper.server.ZooKeeperServerMain.initializeAndRun(ZooKeeperServerMain.java:86)",
                "at org.apache.zookeeper.server.ZooKeeperServerMain.main(ZooKeeperServerMain.java:52)",
                "at org.apache.zookeeper.server.quorum.QuorumPeerMain.initializeAndRun(QuorumPeerMain.java:116)",
                "at org.apache.zookeeper.server.quorum.QuorumPeerMain.main(QuorumPeerMain.java:78)"
            ],
            "StepsToReproduce": [
                "Start the ZooKeeper server with a configuration that includes an invalid path.",
                "Observe the server logs for the IllegalArgumentException."
            ],
            "ExpectedBehavior": "The ZooKeeper server should start successfully and load the database without throwing exceptions.",
            "ObservedBehavior": "The ZooKeeper server fails to start and throws an IllegalArgumentException indicating an invalid path.",
            "AdditionalDetails": "The method findMaxPrefix checks if the path is null or if it is the root path. If the path has only one component (i.e., it is invalid), it throws an IllegalArgumentException. This indicates that the input path provided during the server startup is not valid."
        }
    },
    {
        "filename": "ZOOKEEPER-2297.json",
        "creation_time": "2015-10-19T11:38:58.000+0000",
        "bug_report": {
            "Title": "NullPointerException in X509AuthenticationProvider Initialization",
            "Description": "A NullPointerException occurs during the initialization of the X509AuthenticationProvider in the ZooKeeper server. This issue arises when the createKeyManager method is called with null parameters, leading to a failure in the authentication provider setup.",
            "StackTrace": [
                "java.lang.NullPointerException",
                "at org.apache.zookeeper.common.X509Util.createKeyManager(X509Util.java:129)",
                "at org.apache.zookeeper.server.auth.X509AuthenticationProvider.<init>(X509AuthenticationProvider.java:75)",
                "at org.apache.zookeeper.server.auth.ProviderRegistry.initialize(ProviderRegistry.java:42)",
                "at org.apache.zookeeper.server.auth.ProviderRegistry.getProvider(ProviderRegistry.java:68)",
                "at org.apache.zookeeper.server.PrepRequestProcessor.fixupACL(PrepRequestProcessor.java:952)",
                "at org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(PrepRequestProcessor.java:379)",
                "at org.apache.zookeeper.server.PrepRequestProcessor.pRequest(PrepRequestProcessor.java:716)",
                "at org.apache.zookeeper.server.PrepRequestProcessor.run(PrepRequestProcessor.java:144)"
            ],
            "StepsToReproduce": [
                "Start the ZooKeeper server with an invalid or missing keystore configuration.",
                "Attempt to authenticate using X509 authentication.",
                "Observe the server logs for the NullPointerException."
            ],
            "ExpectedBehavior": "The X509AuthenticationProvider should initialize without errors, and the server should handle authentication requests appropriately.",
            "ObservedBehavior": "A NullPointerException is thrown during the initialization of the X509AuthenticationProvider, causing the server to fail to start or process authentication requests.",
            "AdditionalDetails": "The issue likely stems from the createKeyManager method being called with null parameters (keyStoreLocation or keyStorePassword). This can be confirmed by reviewing the implementation of the createKeyManager method in the X509Util class."
        }
    },
    {
        "filename": "ZOOKEEPER-1264.json",
        "creation_time": "2011-10-28T04:23:28.000+0000",
        "bug_report": {
            "Title": "Assertion Error in FollowerResyncConcurrencyTest: Mismatch in Ephemeral Counts",
            "Description": "The test case 'testResyncBySnapThenDiffAfterFollowerCrashes' in the FollowerResyncConcurrencyTest class is failing due to an assertion error. The test expects both followers to have the same number of ephemeral nodes, but the actual count differs significantly, leading to a failure in the verification step.",
            "StackTrace": [
                "junit.framework.AssertionFailedError: Should have same number of ephemerals in both followers expected:<11741> but was:<14001>",
                "at org.apache.zookeeper.test.FollowerResyncConcurrencyTest.verifyState(FollowerResyncConcurrencyTest.java:400)",
                "at org.apache.zookeeper.test.FollowerResyncConcurrencyTest.testResyncBySnapThenDiffAfterFollowerCrashes(FollowerResyncConcurrencyTest.java:196)",
                "at org.apache.zookeeper.JUnit4ZKTestRunner$LoggedInvokeMethod.evaluate(JUnit4ZKTestRunner.java:52)"
            ],
            "StepsToReproduce": [
                "Run the test suite for the Zookeeper project.",
                "Execute the FollowerResyncConcurrencyTest class.",
                "Observe the failure in the test case 'testResyncBySnapThenDiffAfterFollowerCrashes'."
            ],
            "ExpectedBehavior": "Both followers should have the same number of ephemeral nodes after resynchronization.",
            "ObservedBehavior": "The first follower has 11741 ephemeral nodes while the second follower has 14001 ephemeral nodes, leading to an assertion failure.",
            "AdditionalDetails": "The failure occurs in the 'verifyState' method, specifically in the assertions that compare the sizes of ephemeral sets between the restarted follower and the clean follower. The discrepancy in ephemeral counts suggests a potential issue in session management or state synchronization between the followers."
        }
    },
    {
        "filename": "ZOOKEEPER-2808.json",
        "creation_time": "2017-06-15T17:46:22.000+0000",
        "bug_report": {
            "Title": "RuntimeException: Failed to fetch ACLs for node",
            "Description": "A RuntimeException is thrown when attempting to fetch ACLs for a node in the Zookeeper server. The error occurs during the processing of a request, specifically when the server tries to retrieve the ACLs for a node that may not exist or is improperly referenced.",
            "StackTrace": [
                "java.lang.RuntimeException: Failed to fetch acls for 1",
                "at org.apache.zookeeper.server.DataTree.convertLong(DataTree.java:250)",
                "at org.apache.zookeeper.server.DataTree.getACL(DataTree.java:799)",
                "at org.apache.zookeeper.server.ZKDatabase.getACL(ZKDatabase.java:574)",
                "at org.apache.zookeeper.server.FinalRequestProcessor.processRequest(FinalRequestProcessor.java:463)",
                "at org.apache.zookeeper.server.quorum.CommitProcessor$CommitWorkRequest.doWork(CommitProcessor.java:439)",
                "at org.apache.zookeeper.server.WorkerService$ScheduledWorkRequest.run(WorkerService.java:151)",
                "at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)",
                "at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)",
                "at java.lang.Thread.run(Thread.java:745)"
            ],
            "StepsToReproduce": [
                "Send a request to fetch ACLs for a node that does not exist or is improperly referenced.",
                "Monitor the server logs for the RuntimeException indicating failure to fetch ACLs."
            ],
            "ExpectedBehavior": "The server should return the ACLs for the specified node or indicate that the node does not exist without throwing a RuntimeException.",
            "ObservedBehavior": "The server throws a RuntimeException when attempting to fetch ACLs for a node, indicating a failure in the process.",
            "AdditionalDetails": "The issue seems to stem from the method `getACL` in the `DataTree` class, which is called by `ZKDatabase.getACL`. The stack trace suggests that the node ID being referenced (1) may not be valid or accessible, leading to the failure."
        }
    },
    {
        "filename": "ZOOKEEPER-2982.json",
        "creation_time": "2018-02-19T19:28:06.000+0000",
        "bug_report": {
            "Title": "UnknownHostException when connecting to Zookeeper leader",
            "Description": "The application encounters a java.net.UnknownHostException when attempting to connect to the Zookeeper leader at the specified hostname 'zk-2.zk.default.svc.cluster.local'. This issue arises during the quorum peer's attempt to follow the leader, indicating a potential DNS resolution problem or misconfiguration in the Zookeeper setup.",
            "StackTrace": [
                "java.net.UnknownHostException: zk-2.zk.default.svc.cluster.local",
                "at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:184)",
                "at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)",
                "at java.net.Socket.connect(Socket.java:589)",
                "at org.apache.zookeeper.server.quorum.Learner.sockConnect(Learner.java:227)",
                "at org.apache.zookeeper.server.quorum.Learner.connectToLeader(Learner.java:256)",
                "at org.apache.zookeeper.server.quorum.Follower.followLeader(Follower.java:76)",
                "at org.apache.zookeeper.server.quorum.QuorumPeer.run(QuorumPeer.java:1133)"
            ],
            "StepsToReproduce": [
                "1. Start the Zookeeper server with a configuration that includes 'zk-2.zk.default.svc.cluster.local' as a leader.",
                "2. Attempt to start a follower node that tries to connect to the leader.",
                "3. Observe the logs for any connection errors."
            ],
            "ExpectedBehavior": "The follower node should successfully connect to the leader without any exceptions, allowing for proper quorum operations.",
            "ObservedBehavior": "The follower node throws a java.net.UnknownHostException, indicating that it cannot resolve the hostname 'zk-2.zk.default.svc.cluster.local'.",
            "AdditionalDetails": "This issue may be related to DNS configuration or network settings within the Kubernetes cluster where Zookeeper is deployed. Ensure that the hostname is correctly configured and reachable from the follower nodes."
        }
    },
    {
        "filename": "ZOOKEEPER-1179.json",
        "creation_time": "2011-09-13T16:20:56.000+0000",
        "bug_report": {
            "Title": "IOException during Socket Closure in NettyServerCnxn",
            "Description": "An IOException is thrown when attempting to close a non-blocking socket connection in the NettyServerCnxn class. This issue arises during the cleanup of the writer socket, specifically when the close() method is invoked on a SocketChannel that cannot be completed immediately.",
            "StackTrace": [
                "java.io.IOException: A non-blocking socket operation could not be completed immediately",
                "at sun.nio.ch.SocketDispatcher.close0(Native Method)",
                "at sun.nio.ch.SocketDispatcher.preClose(SocketDispatcher.java:44)",
                "at sun.nio.ch.SocketChannelImpl.implCloseSelectableChannel(SocketChannelImpl.java:684)",
                "at java.nio.channels.spi.AbstractSelectableChannel.implCloseChannel(AbstractSelectableChannel.java:201)",
                "at java.nio.channels.spi.AbstractInterruptibleChannel.close(AbstractInterruptibleChannel.java:97)",
                "at org.jboss.netty.channel.socket.nio.NioWorker.close(NioWorker.java:593)",
                "at org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink.handleAcceptedSocket(NioServerSocketPipelineSink.java:119)",
                "at org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink.eventSunk(NioServerSocketPipelineSink.java:76)",
                "at org.jboss.netty.channel.Channels.close(Channels.java:720)",
                "at org.jboss.netty.channel.AbstractChannel.close(AbstractChannel.java:208)",
                "at org.apache.zookeeper.server.NettyServerCnxn.close(NettyServerCnxn.java:116)",
                "at org.apache.zookeeper.server.NettyServerCnxn.cleanupWriterSocket(NettyServerCnxn.java:241)",
                "at org.apache.zookeeper.server.NettyServerCnxn.access$0(NettyServerCnxn.java:231)",
                "at org.apache.zookeeper.server.NettyServerCnxn$CommandThread.run(NettyServerCnxn.java:314)",
                "at org.apache.zookeeper.server.NettyServerCnxn$CommandThread.start(NettyServerCnxn.java:305)",
                "at org.apache.zookeeper.server.NettyServerCnxn.checkFourLetterWord(NettyServerCnxn.java:674)",
                "at org.apache.zookeeper.server.NettyServerCnxn.receiveMessage(NettyServerCnxn.java:791)",
                "at org.apache.zookeeper.server.NettyServerCnxnFactory$CnxnChannelHandler.processMessage(NettyServerCnxnFactory.java:217)",
                "at org.apache.zookeeper.server.NettyServerCnxnFactory$CnxnChannelHandler.messageReceived(NettyServerCnxnFactory.java:141)",
                "at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:274)",
                "at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:261)",
                "at org.jboss.netty.channel.socket.nio.NioWorker.read(NioWorker.java:350)",
                "at org.jboss.netty.channel.socket.nio.NioWorker.processSelectedKeys(NioWorker.java:281)",
                "at org.jboss.netty.channel.socket.nio.NioWorker.run(NioWorker.java:201)",
                "at org.jboss.netty.util.internal.IoWorkerRunnable.run(IoWorkerRunnable.java:46)",
                "at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "at java.lang.Thread.run(Thread.java:619)"
            ],
            "StepsToReproduce": [
                "Establish a non-blocking socket connection using NettyServerCnxn.",
                "Trigger a scenario where the socket needs to be closed (e.g., client disconnects).",
                "Observe the logs for IOException during the socket closure process."
            ],
            "ExpectedBehavior": "The socket should close gracefully without throwing an IOException.",
            "ObservedBehavior": "An IOException is thrown indicating that a non-blocking socket operation could not be completed immediately during the closure process.",
            "AdditionalDetails": "The issue seems to stem from the cleanupWriterSocket method, which attempts to flush and close the PrintWriter before calling the close method. The close method may be encountering a state where the socket cannot be closed immediately due to its non-blocking nature."
        }
    },
    {
        "filename": "ZOOKEEPER-2581.json",
        "creation_time": "2016-09-14T07:12:58.000+0000",
        "bug_report": {
            "Title": "NullPointerException in X509Util.createKeyManager",
            "Description": "A NullPointerException occurs in the X509Util.createKeyManager method when initializing the X509AuthenticationProvider. This issue arises when the keyStoreLocation or keyStorePassword is null, leading to a failure in creating the key manager.",
            "StackTrace": [
                "java.lang.NullPointerException",
                "at org.apache.zookeeper.common.X509Util.createKeyManager(X509Util.java:129)",
                "at org.apache.zookeeper.server.auth.X509AuthenticationProvider.<init>(X509AuthenticationProvider.java:75)",
                "at org.apache.zookeeper.server.auth.ProviderRegistry.initialize(ProviderRegistry.java:42)",
                "at org.apache.zookeeper.server.auth.ProviderRegistry.getProvider(ProviderRegistry.java:68)",
                "at org.apache.zookeeper.server.PrepRequestProcessor.checkACL(PrepRequestProcessor.java:319)",
                "at org.apache.zookeeper.server.FinalRequestProcessor.processRequest(FinalRequestProcessor.java:324)",
                "at org.apache.zookeeper.server.quorum.CommitProcessor$CommitWorkRequest.doWork(CommitProcessor.java:296)",
                "at org.apache.zookeeper.server.WorkerService$ScheduledWorkRequest.run(WorkerService.java:162)",
                "at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)",
                "at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)",
                "at java.lang.Thread.run(Thread.java:745)"
            ],
            "StepsToReproduce": [
                "1. Attempt to initialize the X509AuthenticationProvider without providing a valid keyStoreLocation or keyStorePassword.",
                "2. Observe the NullPointerException thrown during the initialization process."
            ],
            "ExpectedBehavior": "The X509AuthenticationProvider should initialize successfully without throwing exceptions, provided valid keyStoreLocation and keyStorePassword.",
            "ObservedBehavior": "A NullPointerException is thrown when the keyStoreLocation or keyStorePassword is null, preventing the X509AuthenticationProvider from being initialized.",
            "AdditionalDetails": "The createKeyManager method in X509Util is expected to handle null values for keyStoreLocation and keyStorePassword gracefully. It should either throw a more descriptive exception or provide default values."
        }
    },
    {
        "filename": "ZOOKEEPER-1870.json",
        "creation_time": "2014-01-28T18:45:43.000+0000",
        "bug_report": {
            "Title": "Assertion Failure in ReconfigTest: Quorum Connection Timeout",
            "Description": "The test 'testNormalOperation' in the ReconfigTest class fails with an assertion error indicating that the client could not connect to the reestablished quorum after 30 seconds. This suggests that the quorum configuration is not being properly established or maintained during the test execution.",
            "StackTrace": [
                "junit.framework.AssertionFailedError: client could not connect to reestablished quorum: giving up after 30+ seconds.",
                "at org.apache.zookeeper.test.ReconfigTest.testNormalOperation(ReconfigTest.java:143)",
                "at org.apache.zookeeper.server.quorum.StandaloneDisabledTest.startSingleServerTest(StandaloneDisabledTest.java:75)",
                "at org.apache.zookeeper.JUnit4ZKTestRunner$LoggedInvokeMethod.evaluate(JUnit4ZKTestRunner.java:52)"
            ],
            "StepsToReproduce": [
                "Run the test suite that includes ReconfigTest.",
                "Ensure that the quorum configuration is set up correctly.",
                "Observe the execution of the 'testNormalOperation' method."
            ],
            "ExpectedBehavior": "The client should successfully connect to the reestablished quorum without timing out.",
            "ObservedBehavior": "The client fails to connect to the reestablished quorum, resulting in an assertion failure after 30 seconds.",
            "AdditionalDetails": "The failure occurs in the 'testNormalOperation' method, which is called after the leader server is shut down. The test expects that the remaining followers can still form a quorum. The issue may be related to the timing of server shutdown and the reconfiguration process, particularly in the 'shutDownServer' and 'startFollowers' methods."
        }
    },
    {
        "filename": "ZOOKEEPER-2247.json",
        "creation_time": "2015-08-14T13:13:18.000+0000",
        "bug_report": {
            "Title": "IOException during Zookeeper commit operation",
            "Description": "An IOException is thrown during the commit operation in the Zookeeper server, indicating an input/output error. This issue occurs when the system attempts to force changes to the file system, which may be due to underlying file system issues or resource constraints.",
            "StackTrace": [
                "java.io.IOException: Input/output error",
                "at sun.nio.ch.FileDispatcherImpl.force0(Native Method)",
                "at sun.nio.ch.FileDispatcherImpl.force(FileDispatcherImpl.java:76)",
                "at sun.nio.ch.FileChannelImpl.force(FileChannelImpl.java:376)",
                "at org.apache.zookeeper.server.persistence.FileTxnLog.commit(FileTxnLog.java:331)",
                "at org.apache.zookeeper.server.persistence.FileTxnSnapLog.commit(FileTxnSnapLog.java:380)",
                "at org.apache.zookeeper.server.ZKDatabase.commit(ZKDatabase.java:563)",
                "at org.apache.zookeeper.server.SyncRequestProcessor.flush(SyncRequestProcessor.java:178)",
                "at org.apache.zookeeper.server.SyncRequestProcessor.run(SyncRequestProcessor.java:113)"
            ],
            "StepsToReproduce": [
                "Start the Zookeeper server.",
                "Perform operations that require committing transactions.",
                "Monitor the server logs for any IOException related to file operations."
            ],
            "ExpectedBehavior": "The Zookeeper server should successfully commit transactions without throwing an IOException.",
            "ObservedBehavior": "An IOException is thrown during the commit operation, indicating an input/output error.",
            "AdditionalDetails": "The commit method in the FileTxnLog class is responsible for persisting changes to the file system. The IOException suggests that there may be issues with the file system or insufficient resources available for the operation."
        }
    }
]