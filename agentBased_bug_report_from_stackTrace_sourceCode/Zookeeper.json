[
    {
        "filename": "ZOOKEEPER-1864.json",
        "creation_time": "2014-01-20T06:09:53.000+0000",
        "bug_report": {
            "Title": "NullPointerException in QuorumPeer.setQuorumVerifier",
            "Description": "A NullPointerException occurs in the QuorumPeer class when attempting to set the quorum verifier, likely due to a null value being returned from the getQuorumVerifier method in QuorumPeerConfig.",
            "StackTrace": [
                "java.lang.NullPointerException",
                "at org.apache.zookeeper.server.quorum.QuorumPeer.setQuorumVerifier(QuorumPeer.java:1320)",
                "at org.apache.zookeeper.server.quorum.QuorumPeerMain.runFromConfig(QuorumPeerMain.java:156)",
                "at org.apache.curator.test.TestingZooKeeperServer$1.run(TestingZooKeeperServer.java:134)",
                "at java.lang.Thread.run(Thread.java:722)"
            ],
            "RootCause": "The getQuorumVerifier() method in QuorumPeerConfig is returning null, leading to a null reference being passed to setQuorumVerifier in QuorumPeer.",
            "StepsToReproduce": [
                "Initialize a QuorumPeer instance.",
                "Call the setQuorumVerifier method without a valid QuorumVerifier object.",
                "Observe the NullPointerException being thrown."
            ],
            "ExpectedBehavior": "The setQuorumVerifier method should successfully set the quorum verifier without throwing an exception.",
            "ObservedBehavior": "A NullPointerException is thrown when the setQuorumVerifier method is called with a null quorum verifier.",
            "Suggestions": "Check the implementation of the getQuorumVerifier method in QuorumPeerConfig to ensure it returns a valid QuorumVerifier object. Add null checks in the setQuorumVerifier method to handle cases where a null value is passed."
        }
    },
    {
        "filename": "ZOOKEEPER-2213.json",
        "creation_time": "2015-06-10T15:29:23.000+0000",
        "bug_report": {
            "Title": "IllegalArgumentException: Invalid path in ZooKeeper Server Initialization",
            "Description": "The ZooKeeper server fails to start due to an IllegalArgumentException being thrown when attempting to process a transaction with an invalid path. This issue arises during the initialization phase of the ZooKeeper server.",
            "StackTrace": [
                "java.lang.IllegalArgumentException: Invalid path",
                "at org.apache.zookeeper.common.PathTrie.findMaxPrefix(PathTrie.java:259)",
                "at org.apache.zookeeper.server.DataTree.getMaxPrefixWithQuota(DataTree.java:634)",
                "at org.apache.zookeeper.server.DataTree.setData(DataTree.java:616)",
                "at org.apache.zookeeper.server.DataTree.processTxn(DataTree.java:807)",
                "at org.apache.zookeeper.server.persistence.FileTxnSnapLog.processTransaction(FileTxnSnapLog.java:198)",
                "at org.apache.zookeeper.server.persistence.FileTxnSnapLog.restore(FileTxnSnapLog.java:151)",
                "at org.apache.zookeeper.server.ZKDatabase.loadDataBase(ZKDatabase.java:223)",
                "at org.apache.zookeeper.server.ZooKeeperServer.loadData(ZooKeeperServer.java:250)",
                "at org.apache.zookeeper.server.ZooKeeperServer.startdata(ZooKeeperServer.java:377)",
                "at org.apache.zookeeper.server.NIOServerCnxnFactory.startup(NIOServerCnxnFactory.java:122)",
                "at org.apache.zookeeper.server.ZooKeeperServerMain.runFromConfig(ZooKeeperServerMain.java:112)",
                "at org.apache.zookeeper.server.ZooKeeperServerMain.initializeAndRun(ZooKeeperServerMain.java:86)",
                "at org.apache.zookeeper.server.quorum.QuorumPeerMain.initializeAndRun(QuorumPeerMain.java:116)",
                "at org.apache.zookeeper.server.quorum.QuorumPeerMain.main(QuorumPeerMain.java:78)"
            ],
            "RootCause": "The error is caused by the `findMaxPrefix` method in the `PathTrie` class, which is invoked with an invalid path (either null or a single component path). This is triggered by the `getMaxPrefixWithQuota` method in the `DataTree` class.",
            "StepsToReproduce": [
                "Start the ZooKeeper server with a configuration that includes an invalid path.",
                "Ensure that the path provided is either null or consists of only a single component (e.g., '/').",
                "Observe the server logs for the IllegalArgumentException."
            ],
            "ExpectedBehavior": "The ZooKeeper server should start successfully without throwing any exceptions.",
            "ObservedBehavior": "The ZooKeeper server fails to start and throws an IllegalArgumentException indicating an invalid path.",
            "Suggestions": "Check the configuration files for the ZooKeeper server to ensure that all paths are valid and properly formatted. Specifically, ensure that no paths are null or consist of only a single component. If necessary, add validation logic before invoking methods that require valid paths."
        }
    },
    {
        "filename": "ZOOKEEPER-2297.json",
        "creation_time": "2015-10-19T11:38:58.000+0000",
        "bug_report": {
            "Title": "NullPointerException in X509Util.createKeyManager",
            "Description": "A NullPointerException is thrown during the initialization of the X509AuthenticationProvider, specifically in the createKeyManager method of the X509Util class. This issue arises when the keyStoreLocation or keyStorePassword is null, which are required for creating an X509KeyManager.",
            "StackTrace": [
                "java.lang.NullPointerException",
                "at org.apache.zookeeper.common.X509Util.createKeyManager(X509Util.java:129)",
                "at org.apache.zookeeper.server.auth.X509AuthenticationProvider.<init>(X509AuthenticationProvider.java:75)",
                "at org.apache.zookeeper.server.auth.ProviderRegistry.initialize(ProviderRegistry.java:42)",
                "at org.apache.zookeeper.server.auth.ProviderRegistry.getProvider(ProviderRegistry.java:68)",
                "at org.apache.zookeeper.server.PrepRequestProcessor.fixupACL(PrepRequestProcessor.java:952)",
                "at org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(PrepRequestProcessor.java:379)",
                "at org.apache.zookeeper.server.PrepRequestProcessor.pRequest(PrepRequestProcessor.java:716)",
                "at org.apache.zookeeper.server.PrepRequestProcessor.run(PrepRequestProcessor.java:144)"
            ],
            "RootCause": "The NullPointerException is likely caused by null values for keyStoreLocation or keyStorePassword in the createKeyManager method of the X509Util class.",
            "StepsToReproduce": [
                "Attempt to initialize the X509AuthenticationProvider without providing a valid keyStoreLocation or keyStorePassword.",
                "Observe the logs for the NullPointerException being thrown."
            ],
            "ExpectedBehavior": "The X509AuthenticationProvider should initialize successfully without throwing exceptions when valid keyStoreLocation and keyStorePassword are provided.",
            "ObservedBehavior": "A NullPointerException is thrown, indicating that either keyStoreLocation or keyStorePassword is null during the initialization of the X509AuthenticationProvider.",
            "Suggestions": "Ensure that both keyStoreLocation and keyStorePassword are properly set before initializing the X509AuthenticationProvider. Add null checks in the createKeyManager method to handle cases where these values are not provided."
        }
    },
    {
        "filename": "ZOOKEEPER-1264.json",
        "creation_time": "2011-10-28T04:23:28.000+0000",
        "bug_report": {
            "Title": "Assertion Failure in FollowerResyncConcurrencyTest: Mismatch in Ephemeral Node Count",
            "Description": "The test case 'testResyncBySnapThenDiffAfterFollowerCrashes' in the 'FollowerResyncConcurrencyTest' class is failing due to an assertion error. The expected number of ephemeral nodes (11741) does not match the actual number (14001), indicating a potential issue in the logic or state management of ephemeral nodes within the ZooKeeper ensemble.",
            "StackTrace": [
                "junit.framework.AssertionFailedError: Should have same number of ephemerals in both followers expected:<11741> but was:<14001>",
                "at org.apache.zookeeper.test.FollowerResyncConcurrencyTest.verifyState(FollowerResyncConcurrencyTest.java:400)",
                "at org.apache.zookeeper.test.FollowerResyncConcurrencyTest.testResyncBySnapThenDiffAfterFollowerCrashes(FollowerResyncConcurrencyTest.java:196)",
                "at org.apache.zookeeper.JUnit4ZKTestRunner$LoggedInvokeMethod.evaluate(JUnit4ZKTestRunner.java:52)"
            ],
            "RootCause": "The discrepancy in the number of ephemeral nodes suggests a potential flaw in the state management logic during follower resynchronization, particularly after a follower crash.",
            "StepsToReproduce": [
                "Run the test suite for the ZooKeeper project.",
                "Execute the 'FollowerResyncConcurrencyTest' class.",
                "Observe the failure in the 'testResyncBySnapThenDiffAfterFollowerCrashes' test case."
            ],
            "ExpectedBehavior": "The number of ephemeral nodes in both followers should match after the resynchronization process, specifically 11741 ephemeral nodes.",
            "ObservedBehavior": "The actual number of ephemeral nodes in one of the followers is 14001, leading to an assertion failure.",
            "Suggestions": "Investigate the logic in the 'verifyState' method to ensure that ephemeral nodes are being correctly counted and managed during the resynchronization process. Review the handling of ephemeral nodes during follower crashes and ensure that the state is consistent across all followers."
        }
    },
    {
        "filename": "ZOOKEEPER-2808.json",
        "creation_time": "2017-06-15T17:46:22.000+0000",
        "bug_report": {
            "Title": "RuntimeException: Failed to fetch ACLs for identifier '1'",
            "Description": "A RuntimeException is thrown when attempting to fetch ACLs for the identifier '1' in the Zookeeper server. This issue may stem from various underlying causes, including non-existent identifiers, data corruption, misconfiguration, or type conversion errors.",
            "StackTrace": [
                "java.lang.RuntimeException: Failed to fetch acls for 1",
                "at org.apache.zookeeper.server.DataTree.convertLong(DataTree.java:250)",
                "at org.apache.zookeeper.server.DataTree.getACL(DataTree.java:799)",
                "at org.apache.zookeeper.server.ZKDatabase.getACL(ZKDatabase.java:574)",
                "at org.apache.zookeeper.server.FinalRequestProcessor.processRequest(FinalRequestProcessor.java:463)",
                "at org.apache.zookeeper.server.quorum.CommitProcessor$CommitWorkRequest.doWork(CommitProcessor.java:439)",
                "at org.apache.zookeeper.server.WorkerService$ScheduledWorkRequest.run(WorkerService.java:151)",
                "at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)",
                "at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)",
                "at java.lang.Thread.run(Thread.java:745)"
            ],
            "RootCause": "The identifier '1' may not exist in the Zookeeper database, or there could be a data corruption issue affecting the retrieval of ACLs. Additionally, the convertLong method may be encountering a type conversion issue.",
            "StepsToReproduce": [
                "Attempt to fetch ACLs for the identifier '1' using the Zookeeper API.",
                "Ensure that the identifier '1' is supposed to exist in the database.",
                "Check for any recent changes or updates to the Zookeeper configuration or data."
            ],
            "ExpectedBehavior": "The system should successfully retrieve the ACLs associated with the identifier '1' without throwing an exception.",
            "ObservedBehavior": "A RuntimeException is thrown, indicating a failure to fetch ACLs for the identifier '1'.",
            "Suggestions": "1. Verify that the identifier '1' exists in the Zookeeper database. 2. Check for any data corruption issues that may affect the retrieval process. 3. Review the configuration settings for Zookeeper to ensure they are correct. 4. Investigate the convertLong method for potential type conversion issues."
        }
    },
    {
        "filename": "ZOOKEEPER-2982.json",
        "creation_time": "2018-02-19T19:28:06.000+0000",
        "bug_report": {
            "Title": "UnknownHostException in ZooKeeper Learner Class",
            "Description": "The application encounters an UnknownHostException when attempting to connect to the ZooKeeper leader, indicating a failure to resolve the hostname 'zk-2.zk.default.svc.cluster.local'. This issue is likely related to DNS resolution or network configuration.",
            "StackTrace": [
                "java.net.UnknownHostException: zk-2.zk.default.svc.cluster.local",
                "at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:184)",
                "at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)",
                "at java.net.Socket.connect(Socket.java:589)",
                "at org.apache.zookeeper.server.quorum.Learner.sockConnect(Learner.java:227)",
                "at org.apache.zookeeper.server.quorum.Learner.connectToLeader(Learner.java:256)",
                "at org.apache.zookeeper.server.quorum.Follower.followLeader(Follower.java:76)",
                "at org.apache.zookeeper.server.quorum.QuorumPeer.run(QuorumPeer.java:1133)"
            ],
            "RootCause": "The application cannot resolve the hostname 'zk-2.zk.default.svc.cluster.local', likely due to DNS issues or network configuration problems.",
            "StepsToReproduce": [
                "Deploy the application in an environment where the hostname 'zk-2.zk.default.svc.cluster.local' is not resolvable.",
                "Attempt to start the ZooKeeper service.",
                "Observe the logs for the UnknownHostException."
            ],
            "ExpectedBehavior": "The application should successfully resolve the hostname and establish a connection to the ZooKeeper leader without any exceptions.",
            "ObservedBehavior": "The application throws an UnknownHostException, indicating that it cannot resolve the specified hostname.",
            "Suggestions": "Check the DNS configuration to ensure that the hostname 'zk-2.zk.default.svc.cluster.local' is correctly mapped to an IP address. Verify network connectivity and ensure that the ZooKeeper service is running and accessible from the application."
        }
    },
    {
        "filename": "ZOOKEEPER-1179.json",
        "creation_time": "2011-09-13T16:20:56.000+0000",
        "bug_report": {
            "Title": "IOException during Socket Closure in Netty Server",
            "Description": "An IOException is thrown when attempting to close a non-blocking socket in the Netty server implementation, indicating that the socket operation could not be completed immediately.",
            "StackTrace": [
                "java.io.IOException: A non-blocking socket operation could not be completed immediately",
                "at sun.nio.ch.SocketDispatcher.close0(Native Method)",
                "at sun.nio.ch.SocketDispatcher.preClose(SocketDispatcher.java:44)",
                "at sun.nio.ch.SocketChannelImpl.implCloseSelectableChannel(SocketChannelImpl.java:684)",
                "at java.nio.channels.spi.AbstractSelectableChannel.implCloseChannel(AbstractSelectableChannel.java:201)",
                "at java.nio.channels.spi.AbstractInterruptibleChannel.close(AbstractInterruptibleChannel.java:97)",
                "at org.jboss.netty.channel.socket.nio.NioWorker.close(NioWorker.java:593)",
                "at org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink.handleAcceptedSocket(NioServerSocketPipelineSink.java:119)",
                "at org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink.eventSunk(NioServerSocketPipelineSink.java:76)",
                "at org.jboss.netty.channel.Channels.close(Channels.java:720)",
                "at org.jboss.netty.channel.AbstractChannel.close(AbstractChannel.java:208)",
                "at org.apache.zookeeper.server.NettyServerCnxn.close(NettyServerCnxn.java:116)",
                "at org.apache.zookeeper.server.NettyServerCnxn.cleanupWriterSocket(NettyServerCnxn.java:241)",
                "at org.apache.zookeeper.server.NettyServerCnxn.access$0(NettyServerCnxn.java:231)",
                "at org.apache.zookeeper.server.NettyServerCnxn$CommandThread.run(NettyServerCnxn.java:314)",
                "at org.apache.zookeeper.server.NettyServerCnxn$CommandThread.start(NettyServerCnxn.java:305)",
                "at org.apache.zookeeper.server.NettyServerCnxn.checkFourLetterWord(NettyServerCnxn.java:674)",
                "at org.apache.zookeeper.server.NettyServerCnxn.receiveMessage(NettyServerCnxn.java:791)",
                "at org.apache.zookeeper.server.NettyServerCnxnFactory$CnxnChannelHandler.processMessage(NettyServerCnxnFactory.java:217)",
                "at org.apache.zookeeper.server.NettyServerCnxnFactory$CnxnChannelHandler.messageReceived(NettyServerCnxnFactory.java:141)",
                "at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:274)",
                "at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:261)",
                "at org.jboss.netty.channel.socket.nio.NioWorker.read(NioWorker.java:350)",
                "at org.jboss.netty.channel.socket.nio.NioWorker.processSelectedKeys(NioWorker.java:281)",
                "at org.jboss.netty.channel.socket.nio.NioWorker.run(NioWorker.java:201)",
                "at org.jboss.netty.util.internal.IoWorkerRunnable.run(IoWorkerRunnable.java:46)",
                "at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "at java.lang.Thread.run(Thread.java:619)"
            ],
            "RootCause": "The IOException is likely caused by network issues, the socket being closed unexpectedly, or resource limitations during the socket closure process.",
            "StepsToReproduce": [
                "Start the Netty server and establish a connection.",
                "Simulate a network issue or forcefully close the socket.",
                "Attempt to close the socket from the server side."
            ],
            "ExpectedBehavior": "The socket should close gracefully without throwing an IOException.",
            "ObservedBehavior": "An IOException is thrown indicating that a non-blocking socket operation could not be completed immediately.",
            "Suggestions": "Investigate network stability and resource availability. Consider implementing error handling around socket closure to manage unexpected states. Review the socket lifecycle management in the Netty server implementation."
        }
    },
    {
        "filename": "ZOOKEEPER-2581.json",
        "creation_time": "2016-09-14T07:12:58.000+0000",
        "bug_report": {
            "Title": "NullPointerException in X509Util.createKeyManager",
            "Description": "A NullPointerException is thrown when initializing the X509AuthenticationProvider, indicating that a null parameter is being passed to the createKeyManager method in the X509Util class.",
            "StackTrace": [
                "java.lang.NullPointerException",
                "at org.apache.zookeeper.common.X509Util.createKeyManager(X509Util.java:129)",
                "at org.apache.zookeeper.server.auth.X509AuthenticationProvider.<init>(X509AuthenticationProvider.java:75)",
                "at org.apache.zookeeper.server.auth.ProviderRegistry.initialize(ProviderRegistry.java:42)",
                "at org.apache.zookeeper.server.auth.ProviderRegistry.getProvider(ProviderRegistry.java:68)",
                "at org.apache.zookeeper.server.PrepRequestProcessor.checkACL(PrepRequestProcessor.java:319)",
                "at org.apache.zookeeper.server.FinalRequestProcessor.processRequest(FinalRequestProcessor.java:324)",
                "at org.apache.zookeeper.server.quorum.CommitProcessor$CommitWorkRequest.doWork(CommitProcessor.java:296)",
                "at org.apache.zookeeper.server.WorkerService$ScheduledWorkRequest.run(WorkerService.java:162)",
                "at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)",
                "at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)",
                "at java.lang.Thread.run(Thread.java:745)"
            ],
            "RootCause": "The NullPointerException is likely caused by null parameters being passed to the createKeyManager method in the X509Util class.",
            "StepsToReproduce": [
                "Attempt to initialize the X509AuthenticationProvider in the Zookeeper server.",
                "Ensure that the necessary parameters for the createKeyManager method are not null."
            ],
            "ExpectedBehavior": "The X509AuthenticationProvider should initialize without throwing a NullPointerException.",
            "ObservedBehavior": "A NullPointerException is thrown during the initialization of the X509AuthenticationProvider, causing the server to fail.",
            "Suggestions": "Review the parameters being passed to the createKeyManager method in the X509Util class. Ensure that all required parameters are properly initialized before calling this method."
        }
    },
    {
        "filename": "ZOOKEEPER-1870.json",
        "creation_time": "2014-01-28T18:45:43.000+0000",
        "bug_report": {
            "Title": "AssertionFailedError in ReconfigTest: Client Connection Timeout",
            "Description": "During the execution of the JUnit test 'testNormalOperation' in the 'ReconfigTest' class, an AssertionFailedError occurred indicating that the client could not connect to the reestablished quorum after 30 seconds. This failure suggests potential issues with ZooKeeper's configuration, network connectivity, or server state.",
            "StackTrace": [
                "junit.framework.AssertionFailedError: client could not connect to reestablished quorum: giving up after 30+ seconds.",
                "at org.apache.zookeeper.test.ReconfigTest.testNormalOperation(ReconfigTest.java:143)",
                "at org.apache.zookeeper.server.quorum.StandaloneDisabledTest.startSingleServerTest(StandaloneDisabledTest.java:75)",
                "at org.apache.zookeeper.JUnit4ZKTestRunner$LoggedInvokeMethod.evaluate(JUnit4ZKTestRunner.java:52)"
            ],
            "RootCause": "The client failed to connect to the ZooKeeper quorum, likely due to misconfiguration or network issues.",
            "StepsToReproduce": [
                "Run the JUnit test suite that includes 'ReconfigTest'.",
                "Ensure that the ZooKeeper server is configured correctly and is running.",
                "Observe the test execution for connection errors."
            ],
            "ExpectedBehavior": "The client should successfully connect to the reestablished quorum within the timeout period.",
            "ObservedBehavior": "The client fails to connect to the reestablished quorum, resulting in an AssertionFailedError after 30 seconds.",
            "Suggestions": "Check the ZooKeeper server configuration for correctness, ensure that the server is running and accessible, and verify network connectivity between the client and the server. Additionally, consider increasing the timeout duration for connection attempts if necessary."
        }
    },
    {
        "filename": "ZOOKEEPER-2247.json",
        "creation_time": "2015-08-14T13:13:18.000+0000",
        "bug_report": {
            "Title": "IOException during transaction logging in Apache ZooKeeper",
            "Description": "An IOException is thrown during the transaction logging process in Apache ZooKeeper, indicating an input/output error. This issue appears to be related to file operations in the FileTxnLog and FileTxnSnapLog classes.",
            "StackTrace": [
                "java.io.IOException: Input/output error",
                "at sun.nio.ch.FileDispatcherImpl.force0(Native Method)",
                "at sun.nio.ch.FileDispatcherImpl.force(FileDispatcherImpl.java:76)",
                "at sun.nio.ch.FileChannelImpl.force(FileChannelImpl.java:376)",
                "at org.apache.zookeeper.server.persistence.FileTxnLog.commit(FileTxnLog.java:331)",
                "at org.apache.zookeeper.server.persistence.FileTxnSnapLog.commit(FileTxnSnapLog.java:380)",
                "at org.apache.zookeeper.server.ZKDatabase.commit(ZKDatabase.java:563)",
                "at org.apache.zookeeper.server.SyncRequestProcessor.flush(SyncRequestProcessor.java:178)",
                "at org.apache.zookeeper.server.SyncRequestProcessor.run(SyncRequestProcessor.java:113)"
            ],
            "RootCause": "The IOException likely originates from file system issues, disk problems, or misconfigurations affecting the transaction logging process in ZooKeeper.",
            "StepsToReproduce": [
                "Start the Apache ZooKeeper server with a configured data directory.",
                "Perform operations that require transaction logging.",
                "Monitor the logs for any IOException related to file operations."
            ],
            "ExpectedBehavior": "The ZooKeeper server should successfully log transactions without throwing any IOException.",
            "ObservedBehavior": "The ZooKeeper server throws an IOException indicating an input/output error during transaction logging.",
            "Suggestions": "Investigate the file system for any issues, check disk health, and review ZooKeeper's configuration settings related to data directories and file permissions."
        }
    }
]