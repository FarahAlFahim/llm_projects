[
    {
        "filename": "AMQ-6548.json",
        "creation_time": "2016-12-21T12:04:12.000+0000",
        "bug_report": {
            "Title": "EJB Component Unavailable Exception during Message Processing",
            "Description": "The application encounters an EJBComponentUnavailableException when attempting to process messages in the onMessage method of the Message-Driven Bean (MDB). This occurs when the EJB component is shutting down, leading to a failure in message consumption despite the presence of an exception. The issue was observed in the Wildfly 9.0.2.Final environment with XA Transactions enabled.",
            "StackTrace": [
                "2016-12-15 16:12:58,831 ERROR [org.jboss.as.ejb3.invocation.processInvocation] (default-threads - 23) WFLYEJB0034: EJB Invocation failed on component test.test.mdb for method public void test.test.onMessage(javax.jms.Message): org.jboss.as.ejb3.component.EJBComponentUnavailableException: WFLYEJB0421: Invocation cannot proceed as component is shutting down",
                "at org.jboss.as.ejb3.component.interceptors.ShutDownInterceptorFactory$1.processInvocation(ShutDownInterceptorFactory.java:59)",
                "at org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:340)",
                "at org.jboss.as.ejb3.deployment.processors.EjbSuspendInterceptor.processInvocation(EjbSuspendInterceptor.java:53)",
                "at org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:340)",
                "at org.jboss.as.ejb3.component.interceptors.LoggingInterceptor.processInvocation(LoggingInterceptor.java:66)",
                "at org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:340)",
                "at org.jboss.as.ee.component.NamespaceContextInterceptor.processInvocation(NamespaceContextInterceptor.java:50)",
                "at org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:340)",
                "at org.jboss.as.ejb3.component.interceptors.AdditionalSetupInterceptor.processInvocation(AdditionalSetupInterceptor.java:54)",
                "at org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:340)",
                "at org.jboss.as.ee.component.MessageDrivenComponentDescription$5$1.processInvocation(MessageDrivenComponentDescription.java:213)",
                "at org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:340)",
                "at org.jboss.invocation.ContextClassLoaderInterceptor.processInvocation(ContextClassLoaderInterceptor.java:64)",
                "at org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:340)",
                "at org.jboss.invocation.InterceptorContext.run(InterceptorContext.java:356)",
                "at org.wildfly.security.manager.WildFlySecurityManager.doChecked(WildFlySecurityManager.java:634)",
                "at org.jboss.invocation.AccessCheckingInterceptor.processInvocation(AccessCheckingInterceptor.java:61)",
                "at org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:340)",
                "at org.jboss.invocation.InterceptorContext.run(InterceptorContext.java:356)",
                "at org.jboss.invocation.PrivilegedWithCombinerInterceptor.processInvocation(PrivilegedWithCombinerInterceptor.java:80)",
                "at org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:340)",
                "at org.jboss.invocation.ChainedInterceptor.processInvocation(ChainedInterceptor.java:61)",
                "at org.jboss.as.ee.component.ViewService$View.invoke(ViewService.java:195)",
                "at org.jboss.as.ee.component.ViewDescription$1.processInvocation(ViewDescription.java:185)",
                "at org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:340)",
                "at org.jboss.invocation.ChainedInterceptor.processInvocation(ChainedInterceptor.java:61)",
                "at org.jboss.as.ee.component.ProxyInvocationHandler.invoke(ProxyInvocationHandler.java:73)",
                "at test.test$$$view19.onMessage(Unknown Source)",
                "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)",
                "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
                "at java.lang.reflect.Method.invoke(Method.java:498)",
                "at org.jboss.as.ejb3.inflow.MessageEndpointInvocationHandler.doInvoke(MessageEndpointInvocationHandler.java:139)",
                "at org.jboss.as.ejb3.inflow.AbstractInvocationHandler.invoke(AbstractInvocationHandler.java:73)",
                "at test.test$$$endpoint12.onMessage(Unknown Source)",
                "at org.apache.activemq.ra.MessageEndpointProxy$MessageEndpointAlive.onMessage(MessageEndpointProxy.java:123)",
                "at org.apache.activemq.ra.MessageEndpointProxy.onMessage(MessageEndpointProxy.java:64)",
                "at org.apache.activemq.ActiveMQSession.run(ActiveMQSession.java:1041)",
                "at org.apache.activemq.ra.ServerSessionImpl.run(ServerSessionImpl.java:169)",
                "at org.jboss.jca.core.workmanager.WorkWrapper.run(WorkWrapper.java:226)",
                "at org.jboss.threads.SimpleDirectExecutor.execute(SimpleDirectExecutor.java:33)",
                "at org.jboss.threads.QueueExecutor.runTask(QueueExecutor.java:808)",
                "at org.jboss.threads.QueueExecutor.access$100(QueueExecutor.java:45)",
                "at org.jboss.threads.QueueExecutor$Worker.run(QueueExecutor.java:828)",
                "at java.lang.Thread.run(Thread.java:745)",
                "at org.jboss.threads.JBossThread.run(JBossThread.java:320)"
            ],
            "RootCause": "The EJB method 'onMessage(javax.jms.Message)' could not be executed because the EJB component is shutting down, leading to an EJBComponentUnavailableException. The method may be missing or incorrectly referenced in the source code.",
            "StepsToReproduce": [
                "Deploy the application on Wildfly 9.0.2.Final with XA Transactions enabled.",
                "Send a message to the MDB while the EJB component is in the process of shutting down.",
                "Observe the logs for the EJBComponentUnavailableException."
            ],
            "ExpectedBehavior": "The MDB should process incoming messages without throwing an exception, even if the EJB component is shutting down.",
            "ObservedBehavior": "The MDB throws an EJBComponentUnavailableException, preventing message processing.",
            "Suggestions": "Investigate the lifecycle management of the EJB component to ensure that it properly handles message processing during shutdown. Consider implementing a mechanism to gracefully handle incoming messages or to reject them if the component is shutting down. Additionally, verify the existence and correct referencing of the 'onMessage' method in the source code."
        }
    },
    {
        "filename": "AMQ-3434.json",
        "creation_time": "2011-08-03T09:15:05.000+0000",
        "bug_report": {
            "Title": "NullPointerException in FilePendingMessageCursor during message processing",
            "Description": "An intermittent NullPointerException occurs in the FilePendingMessageCursor when attempting to load messages from the disk. This issue arises during high-load scenarios, particularly when the system is under stress from multiple stomp consumers. The stack trace indicates that the problem originates from the ListIndex.loadNode method, which fails to handle uninitialized objects properly.",
            "StackTrace": [
                "java.lang.NullPointerException",
                "at org.apache.kahadb.index.ListIndex.loadNode(ListIndex.java:203)",
                "at org.apache.kahadb.index.ListIndex.load(ListIndex.java:75)",
                "at org.apache.activemq.store.kahadb.plist.PListStore$1.execute(PListStore.java:219)",
                "at org.apache.kahadb.page.Transaction.execute(Transaction.java:729)",
                "at org.apache.activemq.store.kahadb.plist.PListStore.getPList(PListStore.java:216)",
                "at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.getDiskList(FilePendingMessageCursor.java:454)",
                "at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.flushToDisk(FilePendingMessageCursor.java:432)",
                "at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.tryAddMessageLast(FilePendingMessageCursor.java:217)",
                "at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.addMessageLast(FilePendingMessageCursor.java:193)",
                "at org.apache.activemq.broker.region.Queue.sendMessage(Queue.java:1629)",
                "at org.apache.activemq.broker.region.Queue.doMessageSend(Queue.java:720)",
                "at org.apache.activemq.broker.region.Queue.send(Queue.java:652)",
                "at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:379)",
                "at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:523)",
                "at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129)",
                "at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96)",
                "at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:304)",
                "at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129)",
                "at org.apache.activemq.broker.UserIDBroker.send(UserIDBroker.java:56)",
                "at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:135)",
                "at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:468)",
                "at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:681)",
                "at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:316)",
                "at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:180)",
                "at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69)",
                "at org.apache.activemq.transport.stomp.StompTransportFilter.sendToActiveMQ(StompTransportFilter.java:81)",
                "at org.apache.activemq.transport.stomp.ProtocolConverter.sendToActiveMQ(ProtocolConverter.java:140)",
                "at org.apache.activemq.transport.stomp.ProtocolConverter.onStompSend(ProtocolConverter.java:257)",
                "at org.apache.activemq.transport.stomp.ProtocolConverter.onStompCommand(ProtocolConverter.java:178)",
                "at org.apache.activemq.transport.stomp.StompTransportFilter.onCommand(StompTransportFilter.java:70)",
                "at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)",
                "at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:221)",
                "at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:203)",
                "at java.lang.Thread.run(Thread.java:662)"
            ],
            "RootCause": "The NullPointerException is likely caused by uninitialized objects such as 'pageFile', 'tx', or 'metaData' in the ListIndex.loadNode method. These objects need to be properly initialized before use, and null checks should be implemented to prevent this exception.",
            "StepsToReproduce": [
                "Set up a high-load environment with multiple stomp consumers.",
                "Send a large number of messages to a virtual topic queue.",
                "Monitor the logs for occurrences of NullPointerException in the FilePendingMessageCursor."
            ],
            "ExpectedBehavior": "The system should process messages without throwing exceptions, even under high load. All messages should be successfully sent and received by consumers.",
            "ObservedBehavior": "Intermittent NullPointerException occurs, causing message processing failures and potential message loss.",
            "Suggestions": "Review the ListIndex.loadNode method and ensure that all objects are properly initialized before use. Implement null checks for critical variables to prevent NullPointerExceptions. Consider adding logging to capture the state of the application when the exception occurs to aid in debugging."
        }
    },
    {
        "filename": "AMQ-3443.json",
        "creation_time": "2011-08-09T17:46:14.000+0000",
        "bug_report": {
            "Title": "Intermittent Unit Test Failure Due to Missing Temporary File in KahaDB",
            "Description": "The unit test 'testQueueTransactionalOrderWithRestart' in the KahaDB test suite fails intermittently due to a missing temporary file. The error log indicates that the system is unable to create a recovery file, resulting in a 'FileNotFoundException'. This issue appears to be related to the checkpointing mechanism in the KahaDB storage engine, which is unable to locate or create the necessary temporary files during transaction processing.",
            "StackTrace": [
                "2011-08-09 05:25:21,468 [eckpoint Worker] - ERROR MessageDatabase - Checkpoint failed",
                "java.io.IOException: Cannot create recovery file. Reason: java.io.FileNotFoundException: target/testQueueTransactionalOrderWithRestart/testQueueTransactionalOrderWithRestart/KahaDB/tx-7648-1312867516460.tmp (No such file or directory)",
                "at org.apache.kahadb.util.IOExceptionSupport.create(IOExceptionSupport.java:27)",
                "at org.apache.kahadb.page.PageFile.writeBatch(PageFile.java:1002)",
                "at org.apache.kahadb.page.PageFile.flush(PageFile.java:482)",
                "at org.apache.activemq.store.kahadb.MessageDatabase.checkpointUpdate(MessageDatabase.java:1167)",
                "at org.apache.activemq.store.kahadb.MessageDatabase$10.execute(MessageDatabase.java:728)",
                "at org.apache.kahadb.page.Transaction.execute(Transaction.java:762)",
                "at org.apache.activemq.store.kahadb.MessageDatabase.checkpointCleanup(MessageDatabase.java:726)",
                "at org.apache.activemq.store.kahadb.MessageDatabase.checkpointCleanup(MessageDatabase.java:714)",
                "at org.apache.activemq.store.kahadb.MessageDatabase$3.run(MessageDatabase.java:279)",
                "Caused by: java.io.FileNotFoundException: target/testQueueTransactionalOrderWithRestart/testQueueTransactionalOrderWithRestart/KahaDB/tx-7648-1312867516460.tmp (No such file or directory)",
                "at java.io.RandomAccessFile.open(Native Method)",
                "at java.io.RandomAccessFile.<init>(RandomAccessFile.java:212)",
                "at org.apache.kahadb.page.PageFile$PageWrite.getDiskBound(PageFile.java:185)",
                "at org.apache.kahadb.page.PageFile.writeBatch(PageFile.java:1000)"
            ],
            "RootCause": "The root cause of the issue is the inability of the KahaDB storage engine to create a temporary file due to a missing directory or insufficient permissions. The error indicates that the expected directory structure for temporary files does not exist, leading to a 'FileNotFoundException'.",
            "StepsToReproduce": [
                "Run the unit test 'testQueueTransactionalOrderWithRestart' in the KahaDB test suite.",
                "Ensure that the target directory structure exists: 'target/testQueueTransactionalOrderWithRestart/testQueueTransactionalOrderWithRestart/KahaDB/'.",
                "Observe the intermittent failure of the test due to the missing temporary file."
            ],
            "ExpectedBehavior": "The unit test should complete successfully without throwing a 'FileNotFoundException'. The KahaDB should be able to create and manage temporary files as needed during transaction processing.",
            "ObservedBehavior": "The unit test fails intermittently with a 'FileNotFoundException', indicating that the KahaDB is unable to create the required temporary recovery file.",
            "Suggestions": "1. Verify that the directory structure for temporary files is created before running the tests. Ensure that the 'target/testQueueTransactionalOrderWithRestart/testQueueTransactionalOrderWithRestart/KahaDB/' directory exists and is writable. \n2. Implement error handling in the file creation logic to check for the existence of the directory and create it if it does not exist. \n3. Review the permissions of the directories involved to ensure that the application has the necessary rights to create files."
        }
    },
    {
        "filename": "AMQ-4369.json",
        "creation_time": "2013-03-13T13:51:31.000+0000",
        "bug_report": {
            "Title": "Default IOException handler needs to be set before Persistence adapter and network connectors are started",
            "Description": "An IOException can occur before the default IOExceptionHandler is registered, leading to unhandled exceptions. This issue arises during the initialization of the ActiveMQ broker when the persistence adapter and network connectors are started. The absence of a registered handler results in the system ignoring IO exceptions, which can lead to data loss or corruption. The IOException is logged as follows: \n\n{code}\n2013-03-11 09:51:24,409 | INFO  | No IOExceptionHandler registered, ignoring IO exception, java.io.IOException: Input/output error | org.apache.activemq.broker.BrokerService | ActiveMQ Transport: ssl:///xxx:yyy\njava.io.IOException: Input/output error\n\tat java.io.RandomAccessFile.readBytes(Native Method)\n\tat java.io.RandomAccessFile.read(RandomAccessFile.java:355)\n\tat java.io.RandomAccessFile.readFully(RandomAccessFile.java:414)\n\tat java.io.RandomAccessFile.readFully(RandomAccessFile.java:394)\n\tat org.apache.kahadb.page.PageFile.readPage(PageFile.java:833)\n\tat org.apache.kahadb.page.Transaction$2.readPage(Transaction.java:447)\n\tat org.apache.kahadb.page.Transaction$2.<init>(Transaction.java:438)\n\tat org.apache.kahadb.page.Transaction.openInputStream(Transaction.java:435)\n\tat org.apache.kahadb.page.Transaction.load(Transaction.java:411)\n\tat org.apache.kahadb.page.Transaction.load(Transaction.java:368)\n\tat org.apache.kahadb.index.BTreeIndex.loadNode(BTreeIndex.java:262)\n\tat org.apache.kahadb.index.BTreeIndex.getRoot(BTreeIndex.java:174)\n\tat org.apache.kahadb.index.BTreeIndex.remove(BTreeIndex.java:194)\n\tat org.apache.activemq.store.kahadb.MessageDatabase.updateIndex(MessageDatabase.java:1212)\n\tat org.apache.activemq.store.kahadb.MessageDatabase$15.execute(MessageDatabase.java:1028)\n\tat org.apache.kahadb.page.Transaction.execute(Transaction.java:771)\n\tat org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:1026)\n\tat org.apache.activemq.store.kahadb.MessageDatabase$13.visit(MessageDatabase.java:961)\n\tat org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:953)\n\tat org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:865)\n\tat org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore.removeMessage(KahaDBStore.java:439)\n\tat org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore.removeAsyncMessage(KahaDBStore.java:411)\n\tat org.apache.activemq.store.kahadb.KahaDBTransactionStore.removeAsyncMessage(KahaDBTransactionStore.java:468)\n\tat org.apache.activemq.store.kahadb.KahaDBTransactionStore$1.removeAsyncMessage(KahaDBTransactionStore.java:171)\n\tat org.apache.activemq.broker.region.Queue.acknowledge(Queue.java:830)\n\tat org.apache.activemq.broker.region.Queue.removeMessage(Queue.java:1584)\n\tat org.apache.activemq.broker.region.QueueSubscription.acknowledge(QueueSubscription.java:59)\n\tat org.apache.activemq.broker.region.PrefetchSubscription.acknowledge(PrefetchSubscription.java:294)\n\tat org.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:426)\n\tat org.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:537)\n\tat org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:77)\n\tat org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:77)\n\tat org.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:287)\n\tat org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:77)\n\tat org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:77)\n\tat org.apache.activemq.broker.MutableBrokerFilter.acknowledge(MutableBrokerFilter.java:87)\n\tat org.apache.activemq.broker.TransportConnection.processMessageAck(TransportConnection.java:461)\n\tat org.apache.activemq.command.MessageAck.visit(MessageAck.java:236)\n\tat org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:292)\n\tat org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:150)\n\tat org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)\n\tat org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)\n\tat org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:268)\n\tat org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)\n\tat org.apache.activemq.transport.tcp.SslTransport.doConsume(SslTransport.java:91)\n\tat org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:215)\n\tat org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:197)\n\tat java.lang.Thread.run(Thread.java:679)\n{code}",
            "StackTrace": [
                "java.io.IOException: Input/output error",
                "at java.io.RandomAccessFile.readBytes(Native Method)",
                "at java.io.RandomAccessFile.read(RandomAccessFile.java:355)",
                "at java.io.RandomAccessFile.readFully(RandomAccessFile.java:414)",
                "at java.io.RandomAccessFile.readFully(RandomAccessFile.java:394)",
                "at org.apache.kahadb.page.PageFile.readPage(PageFile.java:833)",
                "at org.apache.kahadb.page.Transaction$2.readPage(Transaction.java:447)",
                "at org.apache.kahadb.page.Transaction$2.<init>(Transaction.java:438)",
                "at org.apache.kahadb.page.Transaction.openInputStream(Transaction.java:435)",
                "at org.apache.kahadb.page.Transaction.load(Transaction.java:411)",
                "at org.apache.kahadb.page.Transaction.load(Transaction.java:368)",
                "at org.apache.kahadb.index.BTreeIndex.loadNode(BTreeIndex.java:262)",
                "at org.apache.kahadb.index.BTreeIndex.getRoot(BTreeIndex.java:174)",
                "at org.apache.kahadb.index.BTreeIndex.remove(BTreeIndex.java:194)",
                "at org.apache.activemq.store.kahadb.MessageDatabase.updateIndex(MessageDatabase.java:1212)",
                "at org.apache.activemq.store.kahadb.MessageDatabase$15.execute(MessageDatabase.java:1028)",
                "at org.apache.kahadb.page.Transaction.execute(Transaction.java:771)",
                "at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:1026)",
                "at org.apache.activemq.store.kahadb.MessageDatabase$13.visit(MessageDatabase.java:961)",
                "at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:953)",
                "at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:865)",
                "at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore.removeMessage(KahaDBStore.java:439)",
                "at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore.removeAsyncMessage(KahaDBStore.java:411)",
                "at org.apache.activemq.store.kahadb.KahaDBTransactionStore.removeAsyncMessage(KahaDBTransactionStore.java:468)",
                "at org.apache.activemq.store.kahadb.KahaDBTransactionStore$1.removeAsyncMessage(KahaDBTransactionStore.java:171)",
                "at org.apache.activemq.broker.region.Queue.acknowledge(Queue.java:830)",
                "at org.apache.activemq.broker.region.Queue.removeMessage(Queue.java:1584)",
                "at org.apache.activemq.broker.region.QueueSubscription.acknowledge(QueueSubscription.java:59)",
                "at org.apache.activemq.broker.region.PrefetchSubscription.acknowledge(PrefetchSubscription.java:294)",
                "at org.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:426)",
                "at org.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:537)",
                "at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:77)",
                "at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:77)",
                "at org.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:287)",
                "at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:77)",
                "at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:77)",
                "at org.apache.activemq.broker.MutableBrokerFilter.acknowledge(MutableBrokerFilter.java:87)",
                "at org.apache.activemq.broker.TransportConnection.processMessageAck(TransportConnection.java:461)",
                "at org.apache.activemq.command.MessageAck.visit(MessageAck.java:236)",
                "at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:292)",
                "at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:150)",
                "at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)",
                "at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)",
                "at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:268)",
                "at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)",
                "at org.apache.activemq.transport.tcp.SslTransport.doConsume(SslTransport.java:91)",
                "at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:215)",
                "at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:197)",
                "at java.lang.Thread.run(Thread.java:679)"
            ],
            "RootCause": "The IOException occurs because the default IOExceptionHandler is not registered before the persistence adapter and network connectors are initialized. This leads to unhandled IO exceptions during critical operations.",
            "StepsToReproduce": [
                "Start the ActiveMQ broker with a configuration that includes a persistence adapter and network connectors.",
                "Trigger an IO operation that results in an IOException before the default handler is registered."
            ],
            "ExpectedBehavior": "The system should register the default IOExceptionHandler before any IO operations are performed, ensuring that all IO exceptions are handled appropriately.",
            "ObservedBehavior": "An IOException occurs, and the system logs a message indicating that no IOExceptionHandler is registered, leading to the exception being ignored.",
            "Suggestions": "Modify the broker initialization sequence to ensure that the default IOExceptionHandler is registered before starting the persistence adapter and network connectors. This can be achieved by adjusting the order of method calls in the BrokerService class."
        }
    },
    {
        "filename": "AMQ-5016.json",
        "creation_time": "2014-02-03T16:40:26.000+0000",
        "bug_report": {
            "Title": "BitArrayBin Class Fails with Indices Exceeding Integer.MAX_VALUE",
            "Description": "The issue arises in the BitArrayBin class where the index is defined as a long type, while the variable firstIndex is defined as an int. This discrepancy leads to incorrect behavior when the index exceeds Integer.MAX_VALUE. Specifically, the methods setBit() and getBit() return erroneous values, causing performance degradation in the ActiveMQ client when processing messages with sequence IDs larger than Integer.MAX_VALUE. The client experiences excessive time spent shifting the window, which blocks other consumer threads. The following stack trace illustrates the problem:\n\n```\n\"ActiveMQ Session Task-869879\" prio=10 tid=0x00007f412d6ee000 nid=0x3cbe runnable [0x00007f405b7b6000]\n   java.lang.Thread.State: RUNNABLE\n        at java.util.LinkedList.linkLast(LinkedList.java:140)\n        at java.util.LinkedList.add(LinkedList.java:336)\n        at org.apache.activemq.util.BitArrayBin.getBitArray(BitArrayBin.java:123)\n        at org.apache.activemq.util.BitArrayBin.setBit(BitArrayBin.java:59)\n        at org.apache.activemq.ActiveMQMessageAuditNoSync.isDuplicate(ActiveMQMessageAuditNoSync.java:160)\n        at org.apache.activemq.ActiveMQMessageAudit.isDuplicate(ActiveMQMessageAudit.java:59)\n        - locked <0x00007f46a0138ab0> (a org.apache.activemq.ActiveMQMessageAudit)\n        at org.apache.activemq.ConnectionAudit.isDuplicate(ConnectionAudit.java:52)\n        - locked <0x00007f4881e6b968> (a org.apache.activemq.ConnectionAudit)\n        at org.apache.activemq.ActiveMQConnection.isDuplicate(ActiveMQConnection.java:2291)\n        at org.apache.activemq.ActiveMQMessageConsumer.dispatch(ActiveMQMessageConsumer.java:1223)\n        - locked <0x00007f45db222fb8> (a java.lang.Object)\n        at org.apache.activemq.ActiveMQSessionExecutor.dispatch(ActiveMQSessionExecutor.java:134)\n        at org.apache.activemq.ActiveMQSessionExecutor.iterate(ActiveMQSessionExecutor.java:205)\n        at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:127)\n        at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:48)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)\n        at java.lang.Thread.run(Thread.java:722)\n```\n",
            "StackTrace": [
                "\"ActiveMQ Session Task-869879\" prio=10 tid=0x00007f412d6ee000 nid=0x3cbe runnable [0x00007f405b7b6000]",
                "java.lang.Thread.State: RUNNABLE",
                "at java.util.LinkedList.linkLast(LinkedList.java:140)",
                "at java.util.LinkedList.add(LinkedList.java:336)",
                "at org.apache.activemq.util.BitArrayBin.getBitArray(BitArrayBin.java:123)",
                "at org.apache.activemq.util.BitArrayBin.setBit(BitArrayBin.java:59)",
                "at org.apache.activemq.ActiveMQMessageAuditNoSync.isDuplicate(ActiveMQMessageAuditNoSync.java:160)",
                "at org.apache.activemq.ActiveMQMessageAudit.isDuplicate(ActiveMQMessageAudit.java:59)",
                "- locked <0x00007f46a0138ab0> (a org.apache.activemq.ActiveMQMessageAudit)",
                "at org.apache.activemq.ConnectionAudit.isDuplicate(ConnectionAudit.java:52)",
                "- locked <0x00007f4881e6b968> (a org.apache.activemq.ConnectionAudit)",
                "at org.apache.activemq.ActiveMQConnection.isDuplicate(ActiveMQConnection.java:2291)",
                "at org.apache.activemq.ActiveMQMessageConsumer.dispatch(ActiveMQMessageConsumer.java:1223)",
                "- locked <0x00007f45db222fb8> (a java.lang.Object)",
                "at org.apache.activemq.ActiveMQSessionExecutor.dispatch(ActiveMQSessionExecutor.java:134)",
                "at org.apache.activemq.ActiveMQSessionExecutor.iterate(ActiveMQSessionExecutor.java:205)",
                "at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:127)",
                "at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:48)",
                "at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)",
                "at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)",
                "at java.lang.Thread.run(Thread.java:722)"
            ],
            "RootCause": "The root cause of the issue is the mismatch in data types between the index (long) and firstIndex (int) in the BitArrayBin class. This leads to incorrect calculations and behavior when the index exceeds the maximum value for an integer.",
            "StepsToReproduce": [
                "Create a scenario where the ActiveMQ client processes messages with sequence IDs greater than Integer.MAX_VALUE.",
                "Monitor the performance and behavior of the client, particularly focusing on the BitArrayBin class.",
                "Observe the stack trace and performance degradation as described."
            ],
            "ExpectedBehavior": "The BitArrayBin class should handle indices larger than Integer.MAX_VALUE without performance degradation or incorrect behavior.",
            "ObservedBehavior": "When the index exceeds Integer.MAX_VALUE, the setBit() and getBit() methods return incorrect values, leading to performance issues and blocking of consumer threads.",
            "Suggestions": "Refactor the BitArrayBin class to ensure that both the index and firstIndex variables are of the same type (long). This will prevent issues related to integer overflow and improve the performance of the ActiveMQ client when handling large sequence IDs."
        }
    },
    {
        "filename": "AMQ-4407.json",
        "creation_time": "2013-03-26T15:41:15.000+0000",
        "bug_report": {
            "Title": "mKahaDB: PageFile is not loaded when recreating queue",
            "Description": "When using mKahaDB, an attempt to recreate a queue after deletion through the admin interface results in an error indicating that the PageFile is not loaded. This issue arises during the initialization of the queue, leading to an IllegalStateException. The error log shows that the PageFile was not properly initialized before the operation was attempted.",
            "StackTrace": [
                "2013-03-08 10:29:17,903 | WARN  | Async error occurred: java.lang.IllegalStateException: PageFile is not loaded | org.apache.activemq.broker.TransportConnection.Service | ActiveMQ Transport: tcp:///0:0:0:0:0:0:0:1%0:65222@61613",
                "java.lang.IllegalStateException: PageFile is not loaded",
                "\tat org.apache.activemq.store.kahadb.disk.page.PageFile.assertLoaded(PageFile.java:809)",
                "\tat org.apache.activemq.store.kahadb.disk.page.PageFile.tx(PageFile.java:303)",
                "\tat org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore.getMessageCount(KahaDBStore.java:478)",
                "\tat org.apache.activemq.store.ProxyMessageStore.getMessageCount(ProxyMessageStore.java:101)",
                "\tat org.apache.activemq.broker.region.Queue.initialize(Queue.java:376)",
                "\tat org.apache.activemq.broker.region.DestinationFactoryImpl.createDestination(DestinationFactoryImpl.java:87)",
                "\tat org.apache.activemq.broker.region.AbstractRegion.createDestination(AbstractRegion.java:526)",
                "\tat org.apache.activemq.broker.region.RegionBroker.addDestination(RegionBroker.java:277)",
                "\tat org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:145)",
                "\tat org.apache.activemq.broker.MutableBrokerFilter.addDestination(MutableBrokerFilter.java:151)",
                "\tat org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:387)",
                "\tat org.apache.activemq.broker.jmx.ManagedRegionBroker.send(ManagedRegionBroker.java:282)",
                "\tat org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96)",
                "\tat org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:317)",
                "\tat org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:135)",
                "\tat org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:499)",
                "\tat org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:749)",
                "\tat org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:329)",
                "\tat org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:184)",
                "\tat org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:45)",
                "\tat org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:288)",
                "\tat org.apache.activemq.transport.stomp.StompTransportFilter.sendToActiveMQ(StompTransportFilter.java:84)",
                "\tat org.apache.activemq.transport.stomp.ProtocolConverter.sendToActiveMQ(ProtocolConverter.java:195)",
                "\tat org.apache.activemq.transport.stomp.ProtocolConverter.onStompSend(ProtocolConverter.java:321)",
                "\tat org.apache.activemq.transport.stomp.ProtocolConverter.onStompCommand(ProtocolConverter.java:233)",
                "\tat org.apache.activemq.transport.stomp.StompTransportFilter.onCommand(StompTransportFilter.java:73)",
                "\tat org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)",
                "\tat org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214)",
                "\tat org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196)",
                "\tat java.lang.Thread.run(Thread.java:680)"
            ],
            "RootCause": "The root cause of the issue is that the PageFile in the KahaDB storage has not been properly initialized or loaded before an operation is attempted. This could be due to issues in the initialization process or misconfiguration in ActiveMQ.",
            "StepsToReproduce": [
                "1. Create a queue using mKahaDB.",
                "2. Delete the queue through the ActiveMQ admin interface.",
                "3. Attempt to recreate the same queue."
            ],
            "ExpectedBehavior": "The queue should be recreated successfully without any errors.",
            "ObservedBehavior": "An IllegalStateException is thrown indicating that the PageFile is not loaded.",
            "Suggestions": "Ensure that the KahaDB storage is properly initialized before attempting to recreate the queue. Check the configuration settings for ActiveMQ to verify that the PageFile is correctly set up and loaded. Consider adding error handling to manage the state of the PageFile before operations are performed."
        }
    },
    {
        "filename": "AMQ-4221.json",
        "creation_time": "2012-12-13T16:15:04.000+0000",
        "bug_report": {
            "Title": "NullPointerException during Queue Message Dispatching",
            "Description": "A NullPointerException (NPE) occurs when attempting to page in more queue messages in the ActiveMQ broker. This issue is particularly evident when using the FilePendingMessageCursor with a selector and expiry settings. The stack trace indicates that the error originates from the ListNode class, specifically during the removal of nodes from the queue.",
            "StackTrace": [
                "java.lang.NullPointerException",
                "at org.apache.kahadb.index.ListNode.access$200(ListNode.java:37)",
                "at org.apache.kahadb.index.ListNode$NodeMarshaller.writePayload(ListNode.java:265)",
                "at org.apache.kahadb.index.ListNode$NodeMarshaller.writePayload(ListNode.java:255)",
                "at org.apache.kahadb.page.Transaction.store(Transaction.java:248)",
                "at org.apache.kahadb.index.ListIndex.storeNode(ListIndex.java:326)",
                "at org.apache.kahadb.index.ListNode.store(ListNode.java:332)",
                "at org.apache.kahadb.index.ListNode.access$500(ListNode.java:37)",
                "at org.apache.kahadb.index.ListNode$ListIterator.remove(ListNode.java:227)",
                "at org.apache.activemq.store.kahadb.plist.PList$PListIterator$1.execute(PList.java:229)",
                "at org.apache.kahadb.page.Transaction.execute(Transaction.java:771)",
                "at org.apache.activemq.store.kahadb.plist.PList$PListIterator.remove(PList.java:226)",
                "at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor$DiskIterator.remove(FilePendingMessageCursor.java:517)",
                "at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.remove(FilePendingMessageCursor.java:321)",
                "at org.apache.activemq.broker.region.Queue.doPageInForDispatch(Queue.java:1735)",
                "at org.apache.activemq.broker.region.Queue.pageInMessages(Queue.java:1948)",
                "at org.apache.activemq.broker.region.Queue.iterate(Queue.java:1465)",
                "at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122)",
                "at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43)",
                "at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "at java.lang.Thread.run(Thread.java:680)"
            ],
            "RootCause": "The NullPointerException is likely caused by uninitialized references in the ListNode and Queue classes, particularly during the execution of the remove methods and the doPageInForDispatch method. The analysis indicates that the issue arises when the system attempts to access or manipulate a node that has not been properly initialized or has been removed from the queue.",
            "StepsToReproduce": [
                "Set up an ActiveMQ broker with a queue configured to use FilePendingMessageCursor.",
                "Send a series of messages to the queue.",
                "Attempt to page in messages while using a selector and expiry settings."
            ],
            "ExpectedBehavior": "The system should successfully page in messages from the queue without encountering a NullPointerException.",
            "ObservedBehavior": "A NullPointerException is thrown, preventing the successful paging of messages from the queue.",
            "Suggestions": "Review the initialization logic in the ListNode and Queue classes, particularly in the remove methods and the doPageInForDispatch method. Ensure that all references are properly initialized before they are accessed. Consider adding null checks or exception handling to prevent the NullPointerException from occurring."
        }
    },
    {
        "filename": "AMQ-3622.json",
        "creation_time": "2011-12-06T15:16:49.000+0000",
        "bug_report": {
            "Title": "NullPointerException in LastImageSubscriptionRecoveryPolicy during Topic Browsing",
            "Description": "A NullPointerException (NPE) is logged when starting up a subscriber with no available messages. The issue occurs in the `browse` method of the `LastImageSubscriptionRecoveryPolicy` class, leading to repeated warnings every 30 seconds until a message is sent to the topic. The stack trace indicates that the NPE is triggered due to an attempt to access a null object reference, likely related to uninitialized messages or subscriptions.",
            "StackTrace": [
                "2011-12-02 15:01:00,588 | WARN  | Failed to browse Topic: xxx | org.apache.activemq.broker.region.Topic | ActiveMQ Broker[xxx] Scheduler",
                "java.lang.NullPointerException",
                "at org.apache.activemq.broker.region.policy.LastImageSubscriptionRecoveryPolicy.browse(LastImageSubscriptionRecoveryPolicy.java:63)",
                "at org.apache.activemq.broker.region.Topic.browse(Topic.java:564)",
                "at org.apache.activemq.broker.region.Topic$6.run(Topic.java:659)",
                "at org.apache.activemq.thread.SchedulerTimerTask.run(SchedulerTimerTask.java:33)",
                "at java.util.TimerThread.mainLoop(Timer.java:512)",
                "at java.util.TimerThread.run(Timer.java:462)"
            ],
            "RootCause": "The NPE is likely caused by uninitialized or null references in the `browse` method of the `LastImageSubscriptionRecoveryPolicy` class. This could be due to the absence of messages or subscriptions when the method is invoked.",
            "StepsToReproduce": [
                "Start up a subscriber with no messages available in the topic.",
                "Observe the logs for repeated warnings about failed browsing attempts."
            ],
            "ExpectedBehavior": "The system should handle the case of no available messages gracefully without throwing a NullPointerException.",
            "ObservedBehavior": "A NullPointerException is logged repeatedly every 30 seconds when attempting to browse a topic with no messages.",
            "Suggestions": "Review the `browse` method in the `LastImageSubscriptionRecoveryPolicy` class to ensure that all object references are properly initialized before use. Implement null checks for any objects that may not be initialized when the method is called. Consider adding logging to capture the state of relevant objects before the NPE occurs."
        }
    },
    {
        "filename": "AMQ-6016.json",
        "creation_time": "2015-10-21T12:55:55.000+0000",
        "bug_report": {
            "Title": "IllegalArgumentException: Comparison method violates its general contract in ActiveMQ",
            "Description": "The message group balancing in ActiveMQ is based on state in the consumer that can be shared across destinations. Under load, this can lead to an IllegalArgumentException due to a violation of the Comparator contract in the `orderedCompare` method used within the `addToConsumerList` method of the `Queue` class. This issue manifests as follows:\n\n```\n2015-04-13 10:24:20,034 | WARN  | IO Worker 308792 | Service                          | ivemq.broker.TransportConnection  312 | 121 - org.apache.activemq.activemq-osgi - 5.9.0 | Async error occurred: \njava.lang.IllegalArgumentException: Comparison method violates its general contract!\n\tat java.util.TimSort.mergeHi(TimSort.java:868)[:1.7.0_65]\n\tat java.util.TimSort.mergeAt(TimSort.java:485)[:1.7.0_65]\n\tat java.util.TimSort.mergeCollapse(TimSort.java:410)[:1.7.0_65]\n\tat java.util.TimSort.sort(TimSort.java:214)[:1.7.0_65]\n\tat java.util.TimSort.sort(TimSort.java:173)[:1.7.0_65]\n\tat java.util.Arrays.sort(Arrays.java:659)[:1.7.0_65]\n\tat java.util.Collections.sort(Collections.java:217)[:1.7.0_65]\n\tat org.apache.activemq.broker.region.Queue.addToConsumerList(Queue.java:2131)[121:org.apache.activemq.activemq-osgi:5.9.0]\n\tat org.apache.activemq.broker.region.Queue.doActualDispatch(Queue.java:2067)[121:org.apache.activemq.activemq-osgi:5.9.0]\n\tat org.apache.activemq.broker.region.Queue.doDispatch(Queue.java:1972)[121:org.apache.activemq.activemq-osgi:5.9.0]\n\tat org.apache.activemq.broker.region.Queue.removeSubscription(Queue.java:587)[121:org.apache.activemq.activemq-osgi:5.9.0]\n\tat org.apache.activemq.broker.region.DestinationFilter.removeSubscription(DestinationFilter.java:127)[121:org.apache.activemq.activemq-osgi:5.9.0]\n\tat ......\n\tat java.lang.Thread.run(Thread.java:745)[:1.7.0_65]\n```\nThis issue is critical as it can lead to message delivery failures under load conditions.",
            "StackTrace": [
                "java.lang.IllegalArgumentException: Comparison method violates its general contract!",
                "at java.util.TimSort.mergeHi(TimSort.java:868)[:1.7.0_65]",
                "at java.util.TimSort.mergeAt(TimSort.java:485)[:1.7.0_65]",
                "at java.util.TimSort.mergeCollapse(TimSort.java:410)[:1.7.0_65]",
                "at java.util.TimSort.sort(TimSort.java:214)[:1.7.0_65]",
                "at java.util.TimSort.sort(TimSort.java:173)[:1.7.0_65]",
                "at java.util.Arrays.sort(Arrays.java:659)[:1.7.0_65]",
                "at java.util.Collections.sort(Collections.java:217)[:1.7.0_65]",
                "at org.apache.activemq.broker.region.Queue.addToConsumerList(Queue.java:2131)[121:org.apache.activemq.activemq-osgi:5.9.0]",
                "at org.apache.activemq.broker.region.Queue.doActualDispatch(Queue.java:2067)[121:org.apache.activemq.activemq-osgi:5.9.0]",
                "at org.apache.activemq.broker.region.Queue.doDispatch(Queue.java:1972)[121:org.apache.activemq.activemq-osgi:5.9.0]",
                "at org.apache.activemq.broker.region.Queue.removeSubscription(Queue.java:587)[121:org.apache.activemq.activemq-osgi:5.9.0]",
                "at org.apache.activemq.broker.region.DestinationFilter.removeSubscription(DestinationFilter.java:127)[121:org.apache.activemq.activemq-osgi:5.9.0]",
                "at java.lang.Thread.run(Thread.java:745)[:1.7.0_65]"
            ],
            "RootCause": "The root cause of the issue is the `orderedCompare` comparator used in the `addToConsumerList` method of the `Queue` class. This comparator is likely violating the general contract of the `Comparator` interface, which can lead to unpredictable behavior during sorting operations.",
            "StepsToReproduce": [
                "1. Set up an ActiveMQ broker with multiple consumers.",
                "2. Send a high volume of messages to the broker to simulate load.",
                "3. Monitor the logs for warnings or errors related to message dispatching."
            ],
            "ExpectedBehavior": "The broker should evenly distribute message groups among consumers without throwing exceptions, even under load.",
            "ObservedBehavior": "Under load, the broker throws an IllegalArgumentException indicating that the comparison method violates its general contract, leading to potential message delivery failures.",
            "Suggestions": "Review the implementation of the `orderedCompare` method in the `Queue` class to ensure it adheres to the Comparator contract. Consider adding unit tests to validate the behavior of the comparator under various scenarios, especially under load conditions."
        }
    },
    {
        "filename": "AMQ-3490.json",
        "creation_time": "2011-09-08T20:31:57.000+0000",
        "bug_report": {
            "Title": "NullPointerException during message processing with FileCursor in ActiveMQ",
            "Description": "In scenarios where a single-consumer queue for non-persistent messages utilizes a file cursor to manage a backlog, bursts of messages lead to NullPointerExceptions (NPEs). The issue appears to be related to the initialization of the PageFile in the PListStore class, which is not properly set up before being accessed, resulting in NPEs during message processing.",
            "StackTrace": [
                "java.lang.NullPointerException",
                "at java.io.Writer.write(Writer.java:140)",
                "at java.io.BufferedWriter.newLine(BufferedWriter.java:225)",
                "at java.util.Properties.writeComments(Properties.java:671)",
                "at java.util.Properties.store0(Properties.java:805)",
                "at java.util.Properties.store(Properties.java:796)",
                "at org.apache.kahadb.page.PageFile.storeMetaData(PageFile.java:570)",
                "at org.apache.kahadb.page.PageFile.load(PageFile.java:361)",
                "at org.apache.activemq.store.kahadb.plist.PListStore.intialize(PListStore.java:285)",
                "at org.apache.activemq.store.kahadb.plist.PListStore.getPList(PListStore.java:218)",
                "at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.getDiskList(FilePendingMessageCursor.java:457)",
                "at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.flushToDisk(FilePendingMessageCursor.java:435)",
                "at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.onUsageChanged(FilePendingMessageCursor.java:388)",
                "at org.apache.activemq.usage.Usage$1.run(Usage.java:268)",
                "at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "at java.lang.Thread.run(Thread.java:619)"
            ],
            "RootCause": "The NullPointerException is likely caused by an uninitialized object in the `PListStore` class, specifically during the execution of the `intialize` method when attempting to load the `PageFile`. The method `this.pageFile.load()` is called without ensuring that `pageFile` is properly initialized.",
            "StepsToReproduce": [
                "Set up a single-consumer queue for non-persistent messages using a file cursor.",
                "Send a burst of messages to the queue.",
                "Monitor the logs for NullPointerExceptions during message processing."
            ],
            "ExpectedBehavior": "The system should process messages without throwing NullPointerExceptions, even during bursts of message traffic.",
            "ObservedBehavior": "NullPointerExceptions are thrown during message processing, leading to failures in handling messages.",
            "Suggestions": "Investigate the initialization process of the `PageFile` in the `PListStore` class. Ensure that the `pageFile` object is properly instantiated before it is accessed in the `intialize` method. Consider adding null checks and logging to identify the state of the object before it is used."
        }
    },
    {
        "filename": "AMQ-6831.json",
        "creation_time": "2017-10-09T10:35:53.000+0000",
        "bug_report": {
            "Title": "Broker fails to start due to missing/corrupt journal files after upgrading to 5.15.1",
            "Description": "After upgrading to ActiveMQ version 5.15.1, the broker fails to start and logs an error indicating missing or corrupt journal files. This issue arises during the recovery process of the KahaDB storage, specifically in the `recoverIndex` method of the `MessageDatabase` class. The error message indicates that 3 messages are affected in the ActiveMQ Dead Letter Queue (DLQ). Downgrading to version 5.15.0 resolves the issue, suggesting a regression in the newer version.",
            "StackTrace": [
                "2017-10-09 12:29:36.802 ERROR 4197 --- [pool-3-thread-1] org.deku.leoz.node.Application           : java.io.IOException: Detected missing/corrupt journal files referenced by:[0:ActiveMQ.DLQ] 3 messages affected.",
                "java.lang.Error: java.io.IOException: Detected missing/corrupt journal files referenced by:[0:ActiveMQ.DLQ] 3 messages affected.",
                "at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1148) ~[na:1.8.0_131]",
                "at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[na:1.8.0_131]",
                "at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_131]",
                "Caused by: java.io.IOException: Detected missing/corrupt journal files referenced by:[0:ActiveMQ.DLQ] 3 messages affected.",
                "at org.apache.activemq.store.kahadb.MessageDatabase.recoverIndex(MessageDatabase.java:965) ~[activemq-kahadb-store-5.15.1.jar:5.15.1]",
                "at org.apache.activemq.store.kahadb.MessageDatabase$5.execute(MessageDatabase.java:717) ~[activemq-kahadb-store-5.15.1.jar:5.15.1]",
                "at org.apache.activemq.store.kahadb.disk.page.Transaction.execute(Transaction.java:779) ~[activemq-kahadb-store-5.15.1.jar:5.15.1]",
                "at org.apache.activemq.store.kahadb.MessageDatabase.recover(MessageDatabase.java:714) ~[activemq-kahadb-store-5.15.1.jar:5.15.1]",
                "at org.apache.activemq.store.kahadb.MessageDatabase.open(MessageDatabase.java:473) ~[activemq-kahadb-store-5.15.1.jar:5.15.1]",
                "at org.apache.activemq.store.kahadb.MessageDatabase.load(MessageDatabase.java:493) ~[activemq-kahadb-store-5.15.1.jar:5.15.1]",
                "at org.apache.activemq.store.kahadb.MessageDatabase.doStart(MessageDatabase.java:297) ~[activemq-kahadb-store-5.15.1.jar:5.15.1]",
                "at org.apache.activemq.store.kahadb.KahaDBStore.doStart(KahaDBStore.java:219) ~[activemq-kahadb-store-5.15.1.jar:5.15.1]",
                "at org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:55) ~[activemq-client-5.15.1.jar:5.15.1]"
            ],
            "RootCause": "The root cause of the issue is the failure of the `recoverIndex` method in the `MessageDatabase` class, which checks for the existence of journal files and throws an `IOException` when they are missing or corrupt. This indicates a potential regression in the handling of journal files in version 5.15.1.",
            "StepsToReproduce": [
                "Upgrade ActiveMQ to version 5.15.1.",
                "Start the broker.",
                "Observe the error logs indicating missing/corrupt journal files."
            ],
            "ExpectedBehavior": "The broker should start successfully without errors related to missing or corrupt journal files.",
            "ObservedBehavior": "The broker fails to start and logs an error indicating missing or corrupt journal files, specifically affecting 3 messages in the ActiveMQ DLQ.",
            "Suggestions": "Consider implementing a fix in the `recoverIndex` method to handle missing or corrupt journal files more gracefully. Additionally, review the changes made in version 5.15.1 that may have affected journal file handling. As a temporary workaround, downgrading to version 5.15.0 resolves the issue."
        }
    },
    {
        "filename": "AMQ-5525.json",
        "creation_time": "2015-01-19T13:47:50.000+0000",
        "bug_report": {
            "Title": "Error Converting Collection Entry in ActiveMQ Browse Command",
            "Description": "The ActiveMQ command `activemq:browse` fails to execute due to an error in converting command-line arguments to a Java `ArrayList<String>`. The issue arises when the command is executed with the parameters `--amqurl tcp://localhost:61616 --user karaf --password karaf -Vbody 1421674680492`. The conversion fails specifically for the value `1421674680492`, which is expected to be a string but is being treated as a long integer, leading to a `java.lang.Exception`.",
            "StackTrace": [
                "java.lang.Exception: Unable to convert from [--amqurl, tcp://localhost:61616, --user, karaf, --password, karaf, -Vbody, 1421674680492] to java.util.ArrayList<java.lang.String>(error converting collection entry)",
                "at org.apache.aries.blueprint.container.AggregateConverter.convertToCollection(AggregateConverter.java:342)",
                "at org.apache.aries.blueprint.container.AggregateConverter.convert(AggregateConverter.java:182)",
                "at org.apache.activemq.karaf.commands.ActiveMQCommand$ActiveMQActionPreparator.convert(ActiveMQCommand.java:143)",
                "at org.apache.activemq.karaf.commands.ActiveMQCommand$ActiveMQActionPreparator.prepare(ActiveMQCommand.java:134)",
                "at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:34)",
                "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)",
                "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
                "at java.lang.reflect.Method.invoke(Method.java:606)",
                "at org.apache.aries.proxy.impl.ProxyHandler$1.invoke(ProxyHandler.java:54)",
                "at org.apache.aries.proxy.impl.ProxyHandler.invoke(ProxyHandler.java:119)",
                "at org.apache.activemq.karaf.commands.$ActiveMQCommand695030723.execute(Unknown Source)",
                "at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)",
                "at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477)",
                "at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403)",
                "at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)",
                "at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)",
                "at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)",
                "at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:92)",
                "at org.apache.activemq.karaf.itest.AbstractFeatureTest$1$1.run(AbstractFeatureTest.java:125)",
                "at org.apache.activemq.karaf.itest.AbstractFeatureTest$1$1.run(AbstractFeatureTest.java:117)",
                "at java.security.AccessController.doPrivileged(Native Method)",
                "at javax.security.auth.Subject.doAs(Subject.java:356)",
                "at org.apache.activemq.karaf.itest.AbstractFeatureTest$1.call(AbstractFeatureTest.java:117)",
                "at org.apache.activemq.karaf.itest.AbstractFeatureTest$1.call(AbstractFeatureTest.java:109)",
                "at java.util.concurrent.FutureTask.run(FutureTask.java:262)",
                "at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)",
                "at java.util.concurrent.FutureTask.run(FutureTask.java:262)",
                "at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)",
                "at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)",
                "at java.lang.Thread.run(Thread.java:745)",
                "Caused by: java.lang.Exception: Unable to convert value 1421674680492 to type java.lang.String",
                "at org.apache.aries.blueprint.container.AggregateConverter.convert(AggregateConverter.java:184)",
                "at org.apache.aries.blueprint.container.AggregateConverter.convertToCollection(AggregateConverter.java:340)"
            ],
            "RootCause": "The root cause of the issue is the `AggregateConverter` class failing to convert the long integer value `1421674680492` to a string type when processing command-line arguments for the `activemq:browse` command. This indicates a type mismatch in the expected input format for the command.",
            "StepsToReproduce": [
                "Execute the command: `activemq:browse --amqurl tcp://localhost:61616 --user karaf --password karaf -Vbody 1421674680492`",
                "Observe the error message indicating conversion failure."
            ],
            "ExpectedBehavior": "The command should successfully execute and return the expected results without any conversion errors.",
            "ObservedBehavior": "The command fails with an exception indicating an inability to convert the provided arguments to the expected type.",
            "Suggestions": "Modify the command to ensure that all parameters are passed as strings. Specifically, ensure that the value `1421674680492` is enclosed in quotes to be treated as a string: `-Vbody '1421674680492'`. Additionally, review the `AggregateConverter` implementation to handle such cases more gracefully."
        }
    },
    {
        "filename": "AMQ-4118.json",
        "creation_time": "2012-10-19T22:14:13.000+0000",
        "bug_report": {
            "Title": "Index Page Overflow Leading to Duplicate Free Calls and Data Integrity Issues",
            "Description": "An overflowed chain is released when it is no longer needed, but the new end page is not stored in the cache. The old value, as a part page, is reused and freed again, leading to critical failures. Keeping the cache in sync resolves this issue. The symptoms vary with usage, particularly with durable subscriptions, where the sequence set expansion and shrinkage can produce values that overflow easily. This scenario has been tested and confirmed to produce errors such as ClassCastException and NullPointerException.",
            "StackTrace": [
                "2012-10-19 22:25:11,928 [exPageUsage#5-2] - ERROR MessageDatabase - KahaDB failed to store to Journal",
                "java.io.EOFException: Chunk stream does not exist, page: 1344 is marked free",
                "at org.apache.kahadb.page.Transaction$2.readPage(Transaction.java:481)",
                "at org.apache.kahadb.page.Transaction$2.<init>(Transaction.java:458)",
                "at org.apache.kahadb.page.Transaction.openInputStream(Transaction.java:455)",
                "at org.apache.kahadb.page.Transaction.load(Transaction.java:431)",
                "at org.apache.kahadb.page.Transaction.load(Transaction.java:388)",
                "at org.apache.kahadb.index.BTreeIndex.loadNode(BTreeIndex.java:262)",
                "at org.apache.kahadb.index.BTreeNode.getChild(BTreeNode.java:225)",
                "at org.apache.kahadb.index.BTreeNode.getLeafNode(BTreeNode.java:680)",
                "at org.apache.kahadb.index.BTreeNode.get(BTreeNode.java:562)",
                "at org.apache.kahadb.index.BTreeIndex.get(BTreeIndex.java:184)",
                "at org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex.get(MessageDatabase.java:2616)",
                "at org.apache.activemq.store.kahadb.MessageDatabase.updateIndex(MessageDatabase.java:1210)",
                "at org.apache.activemq.store.kahadb.MessageDatabase$15.execute(MessageDatabase.java:1002)",
                "at org.apache.kahadb.page.Transaction.execute(Transaction.java:790)",
                "at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:1000)",
                "at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:837)",
                "at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore.doAcknowledge(KahaDBStore.java:723)",
                "at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore.acknowledge(KahaDBStore.java:706)",
                "at org.apache.activemq.store.kahadb.KahaDBTransactionStore.acknowledge(KahaDBTransactionStore.java:519)",
                "at org.apache.activemq.broker.region.Topic.acknowledge(Topic.java:528)",
                "at org.apache.activemq.broker.region.DurableTopicSubscription.acknowledge(DurableTopicSubscription.java:279)",
                "java.lang.ClassCastException: java.lang.Long cannot be cast to java.lang.String",
                "at java.lang.String.compareTo(String.java:92)",
                "at java.util.Arrays.binarySearch0(Arrays.java:2001)",
                "at java.util.Arrays.binarySearch(Arrays.java:1943)",
                "at org.apache.kahadb.index.BTreeNode.put(BTreeNode.java:371)",
                "at org.apache.kahadb.index.BTreeNode.put(BTreeNode.java:369)",
                "at org.apache.kahadb.index.BTreeIndex.put(BTreeIndex.java:189)",
                "at org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex.put(MessageDatabase.java:2592)",
                "at org.apache.activemq.store.kahadb.MessageDatabase.updateIndex(MessageDatabase.java:1168)",
                "at org.apache.activemq.store.kahadb.MessageDatabase$AddOperation.execute(MessageDatabase.java:2082)",
                "at org.apache.kahadb.page.Transaction.execute(Transaction.java:768)",
                "at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:1092)",
                "java.lang.NullPointerException",
                "at org.apache.kahadb.index.BTreeIndex.loadNode(BTreeIndex.java:264)",
                "at org.apache.kahadb.index.BTreeNode.getChild(BTreeNode.java:225)",
                "at org.apache.kahadb.index.BTreeNode.put(BTreeNode.java:369)",
                "at org.apache.kahadb.index.BTreeIndex.put(BTreeIndex.java:189)",
                "at org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex.put(MessageDatabase.java:2592)",
                "at org.apache.activemq.store.kahadb.MessageDatabase.updateIndex(MessageDatabase.java:1168)",
                "at org.apache.activemq.store.kahadb.MessageDatabase$AddOperation.execute(MessageDatabase.java:2082)",
                "at org.apache.kahadb.page.Transaction.execute(Transaction.java:768)",
                "at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:1092)"
            ],
            "RootCause": "The root cause of the issue stems from improper handling of data in the KahaDB and ActiveMQ components, particularly in the BTree structure. The EOFException indicates that a page marked as free is being accessed, while the ClassCastException suggests a type mismatch during indexing operations. The NullPointerException points to uninitialized references in the BTree, leading to data integrity issues.",
            "StepsToReproduce": [
                "Create a durable subscription with a large backlog.",
                "Trigger sequence set expansion and shrinkage.",
                "Attempt to access the index page after overflow occurs."
            ],
            "ExpectedBehavior": "The system should correctly manage the cache and prevent the reuse of freed pages, ensuring that data integrity is maintained and no exceptions are thrown during indexing or data retrieval.",
            "ObservedBehavior": "The system throws EOFException, ClassCastException, and NullPointerException, indicating issues with data handling and integrity, particularly when accessing freed pages or mismatched data types.",
            "Suggestions": "Investigate the transaction management and data integrity mechanisms within KahaDB. Ensure that the cache is kept in sync and that data types are correctly handled in BTree operations. Consider implementing additional checks to prevent accessing freed pages and to handle type mismatches gracefully."
        }
    },
    {
        "filename": "AMQ-4092.json",
        "creation_time": "2012-10-04T02:56:44.000+0000",
        "bug_report": {
            "Title": "ConcurrentModificationException when using message groups in ActiveMQ",
            "Description": "The application frequently logs WARN messages related to ConcurrentModificationException while consuming messages from a queue with the JMSXGroupID header set. Disabling the message groups header eliminates these warnings. The issue appears to be related to concurrent access to a shared data structure, likely within the ActiveMQ message processing pipeline.",
            "StackTrace": [
                "java.util.concurrent.ExecutionException: java.util.ConcurrentModificationException",
                "at java.util.concurrent.FutureTask$Sync.innerGet(FutureTask.java:222)",
                "at java.util.concurrent.FutureTask.get(FutureTask.java:83)",
                "at org.apache.activemq.broker.region.Queue.doMessageSend(Queue.java:785)",
                "at org.apache.activemq.broker.region.Queue.send(Queue.java:707)",
                "at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:407)",
                "at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:503)",
                "at org.apache.activemq.broker.jmx.ManagedRegionBroker.send(ManagedRegionBroker.java:305)",
                "at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129)",
                "at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96)",
                "at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:306)",
                "at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:135)",
                "at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:453)",
                "at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:681)",
                "at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:292)",
                "at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:150)",
                "at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)",
                "at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)",
                "at org.apache.activemq.transport.vm.VMTransport.iterate(VMTransport.java:231)",
                "at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122)",
                "at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43)",
                "at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "at java.lang.Thread.run(Thread.java:680)",
                "Caused by: java.util.ConcurrentModificationException",
                "at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793)",
                "at java.util.HashMap$KeyIterator.next(HashMap.java:828)",
                "at org.apache.activemq.util.MarshallingSupport.marshalPrimitiveMap(MarshallingSupport.java:64)",
                "at org.apache.activemq.command.Message.beforeMarshall(Message.java:210)",
                "at org.apache.activemq.command.ActiveMQObjectMessage.beforeMarshall(ActiveMQObjectMessage.java:199)",
                "at org.apache.activemq.openwire.v6.MessageMarshaller.looseMarshal(MessageMarshaller.java:277)",
                "at org.apache.activemq.openwire.v6.ActiveMQMessageMarshaller.looseMarshal(ActiveMQMessageMarshaller.java:111)",
                "at org.apache.activemq.openwire.v6.ActiveMQObjectMessageMarshaller.looseMarshal(ActiveMQObjectMessageMarshaller.java:111)",
                "at org.apache.activemq.openwire.OpenWireFormat.marshal(OpenWireFormat.java:168)",
                "at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore.addMessage(KahaDBStore.java:429)",
                "at org.apache.activemq.store.kahadb.KahaDBStore$StoreQueueTask.run(KahaDBStore.java:1177)"
            ],
            "RootCause": "The root cause of the issue is a ConcurrentModificationException occurring due to concurrent access to a shared data structure (likely a HashMap) while processing messages in the ActiveMQ broker. This is exacerbated by the use of message groups, which may lead to multiple threads attempting to modify the same collection simultaneously.",
            "StepsToReproduce": [
                "Set up an ActiveMQ broker with version 5.6.0 and configure a queue with message groups enabled (JMSXGroupID).",
                "Use a Spring JMSTemplate producer to send messages to the queue.",
                "Configure a Camel route consumer with a maximum of 5 concurrent consumers.",
                "Monitor the logs for WARN messages related to ConcurrentModificationException."
            ],
            "ExpectedBehavior": "The application should process messages without logging any ConcurrentModificationException warnings, regardless of whether message groups are enabled or disabled.",
            "ObservedBehavior": "The application logs frequent WARN messages indicating a ConcurrentModificationException when message groups are enabled, which does not occur when they are disabled.",
            "Suggestions": "To resolve this issue, consider implementing synchronization mechanisms around the shared data structures accessed during message processing. Additionally, review the ActiveMQ codebase for potential areas where concurrent modifications may occur and refactor those sections to ensure thread safety. Upgrading to a later version of ActiveMQ may also provide fixes for this issue."
        }
    },
    {
        "filename": "AMQ-3887.json",
        "creation_time": "2012-06-18T16:02:55.000+0000",
        "bug_report": {
            "Title": "Occasional Null Pointer Exception during NetworkConnector connection",
            "Description": "While starting a duplex NetworkConnector, a NullPointerException (NPE) can be observed on the receiving side. This issue occurs frequently when multiple brokers are connecting simultaneously, leading to race conditions. The NPE is thrown in the `configureMessage` method of the `DemandForwardingBridgeSupport` class, indicating that certain expected objects are not initialized properly during the connection process.",
            "StackTrace": [
                "java.lang.NullPointerException: null",
                "at org.apache.activemq.network.DemandForwardingBridgeSupport.configureMessage(DemandForwardingBridgeSupport.java:644) ~[activemq-core-5.6.0.jar:5.6.0]",
                "at org.apache.activemq.network.DemandForwardingBridgeSupport.serviceLocalCommand(DemandForwardingBridgeSupport.java:675) ~[activemq-core-5.6.0.jar:5.6.0]",
                "at org.apache.activemq.network.DemandForwardingBridgeSupport$1.onCommand(DemandForwardingBridgeSupport.java:139) [activemq-core-5.6.0.jar:5.6.0]",
                "at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116) [activemq-core-5.6.0.jar:5.6.0]",
                "at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) [activemq-core-5.6.0.jar:5.6.0]",
                "at org.apache.activemq.transport.vm.VMTransport.doDispatch(VMTransport.java:135) [activemq-core-5.6.0.jar:5.6.0]",
                "at org.apache.activemq.transport.vm.VMTransport.dispatch(VMTransport.java:124) [activemq-core-5.6.0.jar:5.6.0]",
                "at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:103) [activemq-core-5.6.0.jar:5.6.0]",
                "at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68) [activemq-core-5.6.0.jar:5.6.0]",
                "at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60) [activemq-core-5.6.0.jar:5.6.0]",
                "at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1307) [activemq-core-5.6.0.jar:5.6.0]",
                "at org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:837) [activemq-core-5.6.0.jar:5.6.0]",
                "at org.apache.activemq.broker.TransportConnection.iterate(TransportConnection.java:872) [activemq-core-5.6.0.jar:5.6.0]",
                "at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122) [activemq-core-5.6.0.jar:5.6.0]",
                "at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43) [activemq-core-5.6.0.jar:5.6.0]",
                "at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source) [na:1.6.0_20]",
                "at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) [na:1.6.0_20]",
                "at java.lang.Thread.run(Unknown Source) [na:1.6.0_20]"
            ],
            "RootCause": "The NullPointerException in the `configureMessage` method is likely caused by uninitialized objects such as `producerInfo`, `md.getMessage()`, or `md.getDestination()`. This indicates a race condition where these objects are accessed before they are properly set up.",
            "StepsToReproduce": [
                "Start multiple brokers connecting to the same NetworkConnector.",
                "Monitor the logs for any NullPointerExceptions during the connection process."
            ],
            "ExpectedBehavior": "The NetworkConnector should establish connections between brokers without throwing any exceptions.",
            "ObservedBehavior": "A NullPointerException is thrown intermittently during the connection process, particularly when many brokers are connecting at once.",
            "Suggestions": "To resolve this issue, ensure that the `MessageDispatch` object is properly initialized before it is used in the `configureMessage` method. Additionally, verify that `producerInfo` is set before calling this method. Implementing synchronization mechanisms or checks to ensure that these objects are initialized before use may help mitigate the race condition."
        }
    },
    {
        "filename": "AMQ-6451.json",
        "creation_time": "2016-10-03T17:09:00.000+0000",
        "bug_report": {
            "Title": "File Descriptor Leak Due to Direct Buffer Memory Allocation Failure in ActiveMQ",
            "Description": "When the `preallocationStrategy` is set to 'zeros', ActiveMQ intermittently fails to allocate direct buffer memory under default JVM settings, leading to unhandled exceptions. This results in the creation of empty journal files and a critical file descriptor leak, ultimately causing ActiveMQ to crash when it runs out of available file descriptors. The issue is exacerbated by the lack of proper exception handling in the relevant methods.",
            "StackTrace": [
                "java.lang.OutOfMemoryError: Direct buffer memory",
                "at java.nio.Bits.reserveMemory(Bits.java:693)[:1.8.0_101]",
                "at java.nio.DirectByteBuffer.<init>(DirectByteBuffer.java:123)[:1.8.0_101]",
                "at java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:311)[:1.8.0_101]",
                "at sun.nio.ch.Util.getTemporaryDirectBuffer(Util.java:174)[:1.8.0_101]",
                "at sun.nio.ch.IOUtil.write(IOUtil.java:58)[:1.8.0_101]",
                "at sun.nio.ch.FileChannelImpl.write(FileChannelImpl.java:211)[:1.8.0_101]",
                "at org.apache.activemq.store.kahadb.disk.journal.Journal.doPreallocationZeros(Journal.java:366)[activemq-kahadb-store-5.14.0.jar:5.14.0]",
                "at org.apache.activemq.store.kahadb.disk.journal.Journal.preallocateEntireJournalDataFile(Journal.java:333)[activemq-kahadb-store-5.14.0.jar:5.14.0]",
                "at org.apache.activemq.store.kahadb.disk.journal.Journal.newDataFile(Journal.java:631)[activemq-kahadb-store-5.14.0.jar:5.14.0]",
                "at org.apache.activemq.store.kahadb.disk.journal.Journal.rotateWriteFile(Journal.java:595)[activemq-kahadb-store-5.14.0.jar:5.14.0]",
                "at org.apache.activemq.store.kahadb.disk.journal.Journal.getCurrentDataFile(Journal.java:984)[activemq-kahadb-store-5.14.0.jar:5.14.0]",
                "at org.apache.activemq.store.kahadb.disk.journal.DataFileAppender.enqueue(DataFileAppender.java:189)[activemq-kahadb-store-5.14.0.jar:5.14.0]",
                "at org.apache.activemq.store.kahadb.disk.journal.DataFileAppender.storeItem(DataFileAppender.java:128)[activemq-kahadb-store-5.14.0.jar:5.14.0]",
                "at org.apache.activemq.store.kahadb.disk.journal.Journal.write(Journal.java:890)[activemq-kahadb-store-5.14.0.jar:5.14.0]",
                "at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:1108)[activemq-kahadb-store-5.14.0.jar:5.14.0]",
                "at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:1090)[activemq-kahadb-store-5.14.0.jar:5.14.0]",
                "at org.apache.activemq.store.kahadb.KahaDBTransactionStore.commit(KahaDBTransactionStore.java:301)[activemq-kahadb-store-5.14.0.jar:5.14.0]",
                "at org.apache.activemq.transaction.LocalTransaction.commit(LocalTransaction.java:70)[activemq-broker-5.14.0.jar:5.14.0]",
                "at org.apache.activemq.broker.TransactionBroker.commitTransaction(TransactionBroker.java:252)[activemq-broker-5.14.0.jar:5.14.0]"
            ],
            "RootCause": "The root cause of the issue is the failure to allocate direct buffer memory due to insufficient memory settings in the JVM, particularly when the `preallocationStrategy` is set to 'zeros'. This leads to unhandled `OutOfMemoryError` exceptions, which in turn cause file descriptor leaks.",
            "StepsToReproduce": [
                "Set the `preallocationStrategy` to 'zeros' in ActiveMQ configuration.",
                "Run ActiveMQ under default JVM settings.",
                "Monitor the application until it runs out of file descriptors."
            ],
            "ExpectedBehavior": "ActiveMQ should handle memory allocation failures gracefully, without leaking file descriptors or crashing.",
            "ObservedBehavior": "ActiveMQ crashes due to unhandled `OutOfMemoryError`, leading to file descriptor leaks and empty journal files.",
            "Suggestions": "1. Increase the direct memory limit by setting the JVM option `-XX:MaxDirectMemorySize` to a higher value.\n2. Implement proper exception handling in the `Journal` class methods to manage memory allocation failures.\n3. Consider optimizing memory usage within ActiveMQ to prevent excessive direct memory allocation.\n4. Document the need for sufficient direct memory allocation in the KahaDB settings to avoid similar issues in the future."
        }
    },
    {
        "filename": "AMQ-3393.json",
        "creation_time": "2011-07-05T14:31:31.000+0000",
        "bug_report": {
            "Title": "Memory Leak Due to Unmanaged STOMP Connection MBeans",
            "Description": "Rapid connect/disconnect cycles in the STOMP protocol can lead to dangling MBeans for transport connections, resulting in a memory leak. The issue arises when a disconnect command is issued before the broker connection is fully established, causing the shutdown command to bypass the pending start completion. This leads to multiple attempts to register the same MBean, triggering an InstanceAlreadyExistsException.",
            "StackTrace": [
                "javax.management.InstanceAlreadyExistsException: org.apache.activemq:BrokerName=xx,Type=Connection,ConnectorName=stomp,ViewType=address,Name=/xx_52170",
                "at com.sun.jmx.mbeanserver.Repository.addMBean(Repository.java:453)",
                "at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.internal_addObject(DefaultMBeanServerInterceptor.java:1484)",
                "at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerDynamicMBean(DefaultMBeanServerInterceptor.java:963)",
                "at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:917)",
                "at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:312)",
                "at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:482)",
                "at org.apache.activemq.broker.jmx.ManagementContext.registerMBean(ManagementContext.java:299)",
                "at org.apache.activemq.broker.jmx.AnnotatedMBean.registerMBean(AnnotatedMBean.java:65)",
                "at org.apache.activemq.broker.jmx.ManagedTransportConnection.registerMBean(ManagedTransportConnection.java:99)",
                "at org.apache.activemq.broker.jmx.ManagedTransportConnection.<init>(ManagedTransportConnection.java:57)",
                "at org.apache.activemq.broker.jmx.ManagedTransportConnector.createConnection(ManagedTransportConnector.java:52)",
                "at org.apache.activemq.broker.TransportConnector$1$1.run(TransportConnector.java:216)",
                "at java.lang.Thread.run(Thread)"
            ],
            "RootCause": "The root cause of the issue is the failure to deregister existing MBeans before attempting to register new instances with the same name. This leads to the InstanceAlreadyExistsException and results in memory leaks as the MBeans accumulate without being properly managed.",
            "StepsToReproduce": [
                "Establish a STOMP connection to the ActiveMQ broker.",
                "Rapidly disconnect and reconnect the STOMP connection multiple times.",
                "Monitor the MBean registration process and observe the warnings/errors in the logs."
            ],
            "ExpectedBehavior": "MBeans for transport connections should be registered and deregistered properly, preventing any InstanceAlreadyExistsException and avoiding memory leaks.",
            "ObservedBehavior": "MBeans are not deregistered correctly, leading to multiple registration attempts and resulting in InstanceAlreadyExistsException errors in the logs.",
            "Suggestions": "Implement a check to ensure that MBeans are deregistered before attempting to register new instances. This can be achieved by modifying the ManagedTransportConnection class to include a deregistration step in the disconnect process. Additionally, consider implementing a mechanism to track registered MBeans to prevent duplicate registrations."
        }
    },
    {
        "filename": "AMQ-5815.json",
        "creation_time": "2015-06-01T12:21:13.000+0000",
        "bug_report": {
            "Title": "Frequency IOException Causes Deadlock in High Concurrency Environment with KahaDB",
            "Description": "In a high concurrency environment where IOPS exceed 3000/s, ActiveMQ connections become blocked, preventing data retrieval and transmission until a restart occurs. This issue manifests frequently and is accompanied by numerous IOExceptions in the ActiveMQ logs. The root cause appears to be related to deadlocks arising from concurrent access to KahaDB, particularly during transaction commits and rollbacks.",
            "StackTrace": [
                "2015-05-28 00:37:08,544 | ERROR | Checkpoint failed | org.apache.activemq.store.kahadb.MessageDatabase | ActiveMQ Journal Checkpoint Worker",
                "java.io.IOException: Input/output error",
                "at java.io.RandomAccessFile.write(Native Method)[:1.6.0_30]",
                "at java.io.RandomAccessFile.writeLong(RandomAccessFile.java:1001)[:1.6.0_30]",
                "at org.apache.activemq.util.RecoverableRandomAccessFile.writeLong(RecoverableRandomAccessFile.java:305)[activemq-kahadb-store-5.10.0.jar:5.10.0]",
                "at org.apache.activemq.store.kahadb.disk.page.PageFile.writeBatch(PageFile.java:1062)[activemq-kahadb-store-5.10.0.jar:5.10.0]",
                "at org.apache.activemq.store.kahadb.disk.page.PageFile.flush(PageFile.java:516)[activemq-kahadb-store-5.10.0.jar:5.10.0]",
                "at org.apache.activemq.store.kahadb.MessageDatabase.checkpointUpdate(MessageDatabase.java:1512)[activemq-kahadb-store-5.10.0.jar:5.10.0]",
                "at org.apache.activemq.store.kahadb.MessageDatabase.checkpointCleanup(MessageDatabase.java:929)[activemq-kahadb-store-5.10.0.jar:5.10.0]"
            ],
            "RootCause": "The deadlock occurs due to multiple threads waiting for locks on KahaDB while attempting to commit or rollback transactions. Specifically, one thread is blocked waiting for a write lock while another is waiting for a read lock, leading to a circular wait condition.",
            "StepsToReproduce": [
                "Set up ActiveMQ with KahaDB in a high concurrency environment.",
                "Generate a load that exceeds 3000 IOPS.",
                "Monitor the ActiveMQ logs for IOExceptions and deadlock conditions."
            ],
            "ExpectedBehavior": "ActiveMQ should handle high concurrency without blocking connections or throwing IOExceptions, allowing for seamless data retrieval and transmission.",
            "ObservedBehavior": "ActiveMQ connections become blocked, and data cannot be retrieved or sent until the broker is restarted. Frequent IOExceptions are logged, indicating issues with KahaDB.",
            "Suggestions": "1. Investigate the locking mechanism in KahaDB to identify potential optimizations for concurrent access.\n2. Consider implementing a timeout for transactions to prevent indefinite blocking.\n3. Review the configuration of KahaDB to ensure it is optimized for high IOPS workloads.\n4. Explore the possibility of using a different persistence mechanism that can handle high concurrency more effectively."
        }
    },
    {
        "filename": "AMQ-5141.json",
        "creation_time": "2014-04-11T11:31:51.000+0000",
        "bug_report": {
            "Title": "SecurityException on Message Expiry Check due to Client Authorization in ActiveMQ",
            "Description": "When the broker processes a RemoveInfo command, it may trigger a message expiry check for prefetched messages. If messages are expired, they are sent to ActiveMQ.DLQ by default. If the broker is security-enabled with authorization turned on, the client's security context is used to send messages to DLQ. This requires that the client user has write access to ActiveMQ.DLQ, which may not be appropriate from a security standpoint. The broker should utilize its internal security context for this operation instead of the client's context.",
            "StackTrace": [
                "2014-04-11 08:11:22,229 | WARN  | 2.38:61201@61616 | RegionBroker | ivemq.broker.region.RegionBroker  703 |",
                "105 - org.apache.activemq.activemq-osgi - 5.8.0.redhat-60024 | Caught an exception sending to DLQ: Message",
                "ID:S930A3085-50865-635327964441522304-1:1:363:2:1 dropped=false acked=false locked=true",
                "java.lang.SecurityException: User Test is not authorized to write to: queue://ActiveMQ.DLQ",
                "at org.apache.activemq.security.AuthorizationBroker.send(AuthorizationBroker.java:197)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024]",
                "at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:135)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024]",
                "at org.apache.activemq.util.BrokerSupport.doResend(BrokerSupport.java:68)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024]",
                "at org.apache.activemq.broker.region.RegionBroker.sendToDeadLetterQueue(RegionBroker.java:691)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024]",
                "at org.apache.activemq.broker.BrokerFilter.sendToDeadLetterQueue(BrokerFilter.java:262)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024]",
                "at org.apache.activemq.broker.MutableBrokerFilter.sendToDeadLetterQueue(MutableBrokerFilter.java:274)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024]",
                "at org.apache.activemq.broker.region.Queue.messageExpired(Queue.java:1671)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024]",
                "at org.apache.activemq.broker.region.PrefetchSubscription.dispatchPending(PrefetchSubscription.java:648)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024]"
            ],
            "RootCause": "The broker is using the client's security context to send expired messages to the Dead Letter Queue (DLQ), which requires the client to have write access to DLQ. The user 'Test' does not have this permission, leading to a SecurityException.",
            "StepsToReproduce": [
                "1. Configure ActiveMQ with security enabled and authorization turned on.",
                "2. Ensure that the user 'Test' does not have write access to ActiveMQ.DLQ.",
                "3. Send messages that will expire and trigger a RemoveInfo command.",
                "4. Observe the SecurityException in the logs."
            ],
            "ExpectedBehavior": "The broker should use its internal security context to send expired messages to the DLQ, regardless of the client's permissions.",
            "ObservedBehavior": "The broker attempts to send expired messages to the DLQ using the client's security context, resulting in a SecurityException if the client lacks the necessary permissions.",
            "Suggestions": "Modify the broker's implementation to ensure that it uses its internal security context when sending messages to the DLQ during the expiry check. Review and adjust the authorization settings for users in the ActiveMQ configuration to prevent similar issues."
        }
    },
    {
        "filename": "AMQ-5854.json",
        "creation_time": "2015-06-19T15:36:33.000+0000",
        "bug_report": {
            "Title": "Duplicate messages when failover occurs during prepare phase of two-phase commit",
            "Description": "This issue arises when using Spring DMLC to read a JMS message from a queue, produce a JMS message in an output queue, and write data to a database. High CPU usage leads to the inactivity monitor closing connections between clients and the broker while processing messages. This results in duplicate message processing due to a failure during the commit phase of transactions.",
            "StackTrace": [
                "org.apache.activemq.transport.InactivityIOException: Channel was inactive for too (>30000) long: tcp://***",
                "ActiveMQMessageConsumer |WARN |jmsContainer-173|rolling back transaction (XID: ***) post failover recovery. 1 previously delivered message(s) not replayed to consumer: ***",
                "javax.jms.JMSException: Unmatched acknowledge: MessageAck {commandId = 6665, responseRequired = false, ackType = 2, consumerId = ID:***, firstMessageId = ID:***-50800-1433109620591-1:2:31356:1:1, lastMessageId = ID:***-50800-1433109620591-1:2:31356:1:1, destination = queue://***, transactionId = XID:[1096044365,globalId=47524f55505f3030303038736572766963657472616974656d656e7431363536373030343133,branchId=47524f55505f3030303038736572766963657472616974656d656e743137343737], messageCount = 1, poisonCause = null}; Could not find Message-ID ID:***-50800-1433109620591-1:2:31356:1:1 in dispatched-list (start of ack)"
            ],
            "RootCause": "The root cause of the issue is identified as a failover occurring during the prepare phase of the commit, which leads to one message being processed twice by different consumers. The synchronization on the deliveredMessages list prevents the clearing of messages in progress, causing duplicates.",
            "StepsToReproduce": [
                "Set up a Spring DMLC to read from a JMS queue and produce messages to an output queue.",
                "Configure the broker with transport.useKeepAlive=false and client with wireFormat.maxInactivityDuration=5000.",
                "Introduce a delay in the acknowledge method of ActiveMQMessageConsumer to simulate a failover during the commit phase.",
                "Process multiple messages concurrently to trigger the failover and observe the duplicate message issue."
            ],
            "ExpectedBehavior": "Messages should be processed exactly once, with no duplicates occurring during failover scenarios.",
            "ObservedBehavior": "Messages are processed multiple times due to a failure during the commit phase, leading to duplicate entries in the database and multiple output JMS messages generated.",
            "Suggestions": "Consider implementing a mechanism to force a rollback of transactions if a failover occurs during the prepare phase of commit in ConnectionStateTracker.restoreTransactions(). Additionally, review the configuration settings related to timeouts and connection management to ensure stability during high load scenarios."
        }
    },
    {
        "filename": "AMQ-3056.json",
        "creation_time": "2010-11-26T14:36:24.000+0000",
        "bug_report": {
            "Title": "Invalid Acknowledgment Exception During Message Redelivery in ActiveMQ",
            "Description": "An exception occurs when processing the acknowledgment of a message in the ActiveMQ broker, specifically when a message is redelivered. The error message indicates that an invalid acknowledgment is being sent, which may be due to the message being acknowledged multiple times or an acknowledgment being sent for a message that is no longer valid.",
            "StackTrace": [
                "javax.jms.JMSException: Invalid acknowledgment: MessageAck {commandId = 29455, responseRequired = false, ackType = 3, consumerId = ID:X-2506-1289583778418-0:0:1:1, firstMessageId = ID:X-51821-634249796434830099-1:5:1:3:313195, lastMessageId = ID:X-51821-634249796434830099-1:5:1:3:313195, destination = topic://help.Publish.Instance1, transactionId = null, messageCount = 1}",
                "at org.apache.activemq.broker.region.TopicSubscription.acknowledge(TopicSubscription.java:286)",
                "at org.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:383)",
                "at org.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:544)",
                "at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:77)",
                "at org.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:200)",
                "at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:77)",
                "at org.apache.activemq.broker.MutableBrokerFilter.acknowledge(MutableBrokerFilter.java:87)",
                "at org.apache.activemq.broker.TransportConnection.processMessageAck(TransportConnection.java:469)",
                "at org.apache.activemq.command.MessageAck.visit(MessageAck.java:214)",
                "at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:311)",
                "at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:185)",
                "at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69)",
                "at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)",
                "at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:228)",
                "at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)",
                "at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:220)",
                "at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:202)",
                "at java.lang.Thread.run(Thread.java:619)"
            ],
            "RootCause": "The root cause of the issue is likely due to the acknowledgment process in the ActiveMQ broker, where the acknowledgment for a message is being processed incorrectly, either due to multiple acknowledgments for the same message or an acknowledgment for a message that has already been processed or is no longer valid.",
            "StepsToReproduce": [
                "Set up an ActiveMQ broker and create a topic subscription.",
                "Publish a message to the topic.",
                "Simulate a scenario where the message is redelivered.",
                "Attempt to acknowledge the message multiple times or acknowledge a message that has already been processed."
            ],
            "ExpectedBehavior": "The acknowledgment of a message should be processed correctly without throwing an exception, allowing the message to be marked as acknowledged and removed from the queue.",
            "ObservedBehavior": "An exception is thrown indicating an invalid acknowledgment, preventing the message from being acknowledged and causing potential message delivery issues.",
            "Suggestions": "Review the acknowledgment logic in the `TopicSubscription` and `AbstractRegion` classes to ensure that acknowledgments are only processed once per message. Implement checks to validate the state of the message before processing an acknowledgment to prevent multiple acknowledgments or invalid acknowledgments from being sent."
        }
    },
    {
        "filename": "AMQ-3325.json",
        "creation_time": "2011-05-17T08:58:50.000+0000",
        "bug_report": {
            "Title": "PList temp store: Chunk stream does not exist when broker under stress",
            "Description": "This bug report addresses a concurrency issue observed in the ActiveMQ broker when operating under high load conditions on a multicore system (8 CPUs). The issue manifests sporadically and is related to memory limits and the dynamic creation and deletion of destinations. The broker encounters an I/O error, specifically an EOFException, indicating that a chunk stream does not exist at a specified page in the KahaDB storage. This suggests potential corruption or access issues with the database file.",
            "StackTrace": [
                "2011-04-07 08:04:07,295 [Queue:loadq-4  ] ERROR FilePendingMessageCursor - I/O error",
                "java.io.EOFException: Chunk stream does not exist at page: 198",
                "at org.apache.kahadb.page.Transaction$2.readPage(Transaction.java:454)",
                "at org.apache.kahadb.page.Transaction$2.<init>(Transaction.java:431)",
                "at org.apache.kahadb.page.Transaction.openInputStream(Transaction.java:428)",
                "at org.apache.kahadb.page.Transaction.load(Transaction.java:404)",
                "at org.apache.kahadb.page.Transaction.load(Transaction.java:361)",
                "at org.apache.activemq.store.kahadb.plist.PList.loadEntry(PList.java:468)",
                "at org.apache.activemq.store.kahadb.plist.PList.getNext(PList.java:483)",
                "at org.apache.activemq.store.kahadb.plist.PList$10.execute(PList.java:312)",
                "at org.apache.kahadb.page.Transaction.execute(Transaction.java:728)",
                "at org.apache.activemq.store.kahadb.plist.PList.getNext(PList.java:310)",
                "at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor$DiskIterator.next(FilePendingMessageCursor.java:500)",
                "at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor$DiskIterator.next(FilePendingMessageCursor.java:473)",
                "at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.next(FilePendingMessageCursor.java:293)",
                "at org.apache.activemq.broker.region.Queue.doPageInForDispatch(Queue.java:1714)",
                "at org.apache.activemq.broker.region.Queue.pageInMessages(Queue.java:1932)",
                "at org.apache.activemq.broker.region.Queue.iterate(Queue.java:1440)",
                "at org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:104)",
                "at org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:42)"
            ],
            "RootCause": "The root cause of the issue appears to be related to the KahaDB storage system, specifically an inability to access a chunk stream at a certain page, which may indicate corruption or improper handling of concurrent access to the database files.",
            "StepsToReproduce": [
                "Set up an ActiveMQ broker with KahaDB as the storage mechanism.",
                "Configure the broker to handle a high load with multiple concurrent producers and consumers.",
                "Dynamically create and delete destinations while the broker is under load.",
                "Monitor the broker logs for occurrences of the EOFException."
            ],
            "ExpectedBehavior": "The ActiveMQ broker should handle concurrent access and dynamic destination management without encountering I/O errors or exceptions related to the KahaDB storage.",
            "ObservedBehavior": "Under high load conditions, the broker sporadically throws an EOFException indicating that a chunk stream does not exist at a specific page, leading to potential message loss or broker instability.",
            "Suggestions": "1. Check the integrity of the KahaDB files to ensure there is no corruption. Consider running a repair on the database if corruption is detected.\n2. Review the ActiveMQ documentation for best practices on configuring KahaDB under high load conditions.\n3. Implement logging around the dynamic creation and deletion of destinations to identify patterns leading to the issue.\n4. Consider increasing memory limits or optimizing the broker configuration to better handle high concurrency."
        }
    },
    {
        "filename": "AMQ-2963.json",
        "creation_time": "2010-10-07T06:52:51.000+0000",
        "bug_report": {
            "Title": "Invalid JMS Destination Name Error with JMSBridgeConnectors in ActiveMQ 5.4.0",
            "Description": "When attempting to create a bridge between IBM Websphere Queue and ActiveMQ queue using JMSBridgeConnectors, an error occurs with ActiveMQ version 5.4.0. The error message indicates that the destination name '://IBM.TO.ACTIVEMQ' is invalid and does not conform to the required JMS destination syntax. This issue does not occur with ActiveMQ version 5.2.0.",
            "StackTrace": [
                "com.ibm.msg.client.jms.DetailedInvalidDestinationException: JMSCMQ0005: The destination name '://IBM.TO.ACTIVEMQ' was not valid. The destination name specified does not conform to published destination syntax. Correct the specified destination name and try again.",
                "at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)",
                "at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)",
                "at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)",
                "at java.lang.reflect.Constructor.newInstance(Constructor.java:513)",
                "at com.ibm.msg.client.commonservices.j2se.NLSServices.createException(NLSServices.java:313)",
                "at com.ibm.msg.client.commonservices.nls.NLSServices.createException(NLSServices.java:388)",
                "at com.ibm.msg.client.wmq.common.internal.WMQDestinationURIParser.setUri(WMQDestinationURIParser.java:524)",
                "at com.ibm.msg.client.wmq.common.internal.WMQDestination.<init>(WMQDestination.java:3148)",
                "at com.ibm.msg.client.wmq.common.internal.WMQDestination.<init>(WMQDestination.java:3104)",
                "at com.ibm.msg.client.wmq.factories.WMQFactoryFactory.createProviderDestination(WMQFactoryFactory.java:444)",
                "at com.ibm.msg.client.jms.admin.JmsDestinationImpl.setProviderDestination(JmsDestinationImpl.java:333)",
                "at com.ibm.msg.client.jms.admin.JmsDestinationImpl.initialise(JmsDestinationImpl.java:231)",
                "at com.ibm.msg.client.jms.admin.JmsDestinationImpl.<init>(JmsDestinationImpl.java:196)",
                "at com.ibm.msg.client.jms.admin.JmsJndiDestinationImpl.<init>(JmsJndiDestinationImpl.java:129)",
                "at com.ibm.mq.jms.MQDestination.<init>(MQDestination.java:186)",
                "at com.ibm.msg.client.wmq.factories.admin.WMQJmsFactory.createDestination(WMQJmsFactory.java:125)",
                "at com.ibm.msg.client.jms.internal.JmsMessageImpl.providerDestToJmsDest(JmsMessageImpl.java:2111)",
                "at com.ibm.msg.client.jms.internal.JmsMessageImpl.getJMSDestination(JmsMessageImpl.java:686)",
                "at org.apache.activemq.ActiveMQMessageTransformation.copyProperties(ActiveMQMessageTransformation.java:206)",
                "at org.apache.activemq.ActiveMQMessageTransformation.transformMessage(ActiveMQMessageTransformation.java:188)",
                "at org.apache.activemq.ActiveMQSession.send(ActiveMQSession.java:1720)",
                "at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:231)",
                "at org.apache.activemq.ActiveMQMessageProducerSupport.send(ActiveMQMessageProducerSupport.java:300)",
                "at org.apache.activemq.ActiveMQQueueSender.send(ActiveMQQueueSender.java:111)",
                "at org.apache.activemq.network.jms.QueueBridge.sendMessage(QueueBridge.java:80)",
                "at org.apache.activemq.network.jms.DestinationBridge.onMessage(DestinationBridge.java:129)",
                "at com.ibm.mq.jms.MQMessageConsumer$FacadeMessageListener.onMessage(MQMessageConsumer.java:399)",
                "at com.ibm.msg.client.jms.internal.JmsMessageConsumerImpl$JmsProviderMessageListener.onMessage(JmsMessageConsumerImpl.java:904)",
                "at com.ibm.msg.client.wmq.internal.WMQAsyncConsumerShadow.honourNoLocal(WMQAsyncConsumerShadow.java:550)",
                "at com.ibm.msg.client.wmq.internal.WMQAsyncConsumerShadow.consumer(WMQAsyncConsumerShadow.java:384)",
                "at com.ibm.mq.jmqi.remote.internal.RemoteAsyncConsume.driveConsumer(RemoteAsyncConsume.java:1478)",
                "at com.ibm.mq.jmqi.remote.internal.RemoteDispatchThread.run(RemoteDispatchThread.java:385)",
                "at com.ibm.msg.client.commonservices.workqueue.WorkQueueItem.runTask(WorkQueueItem.java:209)",
                "at com.ibm.msg.client.commonservices.workqueue.SimpleWorkQueueItem.runItem(SimpleWorkQueueItem.java:100)",
                "at com.ibm.msg.client.commonservices.workqueue.WorkQueueItem.run(WorkQueueItem.java:224)",
                "at com.ibm.msg.client.commonservices.workqueue.WorkQueueManager.runWorkQueueItem(WorkQueueManager.java:298)",
                "at com.ibm.msg.client.commonservices.j2se.workqueue.WorkQueueManagerImplementation$ThreadPoolWorker.run(WorkQueueManagerImplementation.java:1220)"
            ],
            "RootCause": "The root cause of the issue is the incorrect format of the JMS destination name. The destination name '://IBM.TO.ACTIVEMQ' does not conform to the expected URI format for JMS destinations, which should be either 'queue://IBM.TO.ACTIVEMQ' or 'topic://IBM.TO.ACTIVEMQ'. This was exacerbated by changes in the ActiveMQ codebase after version 5.2.0 that altered how JMS properties are set during message transformation.",
            "StepsToReproduce": [
                "Define a broker in activemq.xml with the following jmsBridgeConnectors information:",
                "<jmsBridgeConnectors>",
                "    <jmsQueueConnector outboundQueueConnectionFactory=\"#remoteFactory\">",
                "        <inboundQueueBridges>",
                "            <inboundQueueBridge inboundQueueName=\"IBM.TO.ACTIVEMQ\" localQueueName=\"IBM.TO.ACTIVEMQ\"/>",
                "        </inboundQueueBridges>",
                "    </jmsQueueConnector>",
                "</jmsBridgeConnectors>",
                "Attempt to send a message to the IBM Websphere Queue using ActiveMQ 5.4.0."
            ],
            "ExpectedBehavior": "The message should be successfully sent to the IBM Websphere Queue without any errors related to the destination name.",
            "ObservedBehavior": "An error occurs indicating that the destination name '://IBM.TO.ACTIVEMQ' is invalid and does not conform to the required JMS destination syntax.",
            "Suggestions": "Update the destination name in the configuration to conform to the JMS specification. Use a valid URI format such as 'queue://IBM.TO.ACTIVEMQ' or 'topic://IBM.TO.ACTIVEMQ' depending on the intended use. Additionally, review the changes made to the ActiveMQ codebase in version 5.4.0 to ensure compatibility with existing configurations."
        }
    },
    {
        "filename": "AMQ-3903.json",
        "creation_time": "2012-06-28T14:09:35.000+0000",
        "bug_report": {
            "Title": "NullPointerException when firing fast producer advisory in ActiveMQ",
            "Description": "When sending a large number of messages to the queue via the web console with the configuration `advisoryForFastProducers=\"true\"`, a `NullPointerException` is thrown. This occurs specifically when the system attempts to fire the fast producer advisory, indicating that a null reference is being accessed in the advisory handling logic.",
            "StackTrace": [
                "java.lang.NullPointerException",
                "at org.apache.activemq.advisory.AdvisorySupport.getFastProducerAdvisoryTopic(AdvisorySupport.java:195)",
                "at org.apache.activemq.advisory.AdvisoryBroker.fastProducer(AdvisoryBroker.java:352)",
                "at org.apache.activemq.broker.BrokerFilter.fastProducer(BrokerFilter.java:275)",
                "at org.apache.activemq.broker.BrokerFilter.fastProducer(BrokerFilter.java:275)",
                "at org.apache.activemq.broker.MutableBrokerFilter.fastProducer(MutableBrokerFilter.java:286)",
                "at org.apache.activemq.broker.region.BaseDestination.fastProducer(BaseDestination.java:512)",
                "at org.apache.activemq.broker.region.Queue.send(Queue.java:605)",
                "at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:407)",
                "at org.apache.activemq.broker.RegionBroker.send(RegionBroker.java:503)",
                "at org.apache.activemq.broker.jmx.ManagedRegionBroker.send(ManagedRegionBroker.java:305)",
                "at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129)",
                "at org.apache.activemq.broker.scheduler.SchedulerBroker.send(SchedulerBroker.java:189)",
                "at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129)",
                "at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96)",
                "at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:306)",
                "at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:135)",
                "at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:453)",
                "at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:681)",
                "at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:292)",
                "at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:150)",
                "at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)",
                "at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)",
                "at org.apache.activemq.transport.vm.VMTransport.iterate(VMTransport.java:231)",
                "at org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:98)",
                "at org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:36)"
            ],
            "RootCause": "The `NullPointerException` is likely caused by a null `Destination` being passed to the `getFastProducerAdvisoryTopic` method in the `AdvisorySupport` class. This results in attempts to access methods on a null reference, leading to the exception.",
            "StepsToReproduce": [
                "Configure ActiveMQ to enable fast producer advisories by setting `advisoryForFastProducers=\"true\"`.",
                "Send a large number of messages to the queue using the web console.",
                "Monitor the logs for warnings or errors related to fast producer advisories."
            ],
            "ExpectedBehavior": "The system should successfully fire the fast producer advisory without throwing any exceptions, allowing for proper monitoring of producer activity.",
            "ObservedBehavior": "A `NullPointerException` is thrown, preventing the advisory from being fired and resulting in a warning message in the logs.",
            "Suggestions": "Investigate the `getFastProducerAdvisoryTopic` method in the `AdvisorySupport` class to ensure that it handles null `Destination` references appropriately. Implement null checks or default behavior to prevent the `NullPointerException` from occurring."
        }
    },
    {
        "filename": "AMQ-2693.json",
        "creation_time": "2010-04-12T13:58:58.000+0000",
        "bug_report": {
            "Title": "Potential Deadlock During Failover with Outstanding Commit in ActiveMQ",
            "Description": "A potential deadlock situation has been identified in ActiveMQ when handling failover scenarios, particularly when transactions are involved and thread creation is slow. The issue arises when an outstanding commit blocks the dispatch of messages, leading to a hang in the system. The log indicates that dispatch is paused while waiting for outstanding dispatch interruption processing to complete.",
            "StackTrace": [
                "WARN  ActiveMQConnection - dispatch paused, waiting for outstanding dispatch interruption processing (x) to complete..",
                "Full thread dump Java HotSpot(TM) Server VM (14.0-b16 mixed mode):",
                "ActiveMQ Transport: tcp:///127.0.0.1:49284 daemon prio=3 tid=0x0068f800 nid=0x32 runnable [0x56ffe000]",
                "java.lang.Thread.State: RUNNABLE",
                "at java.net.SocketOutputStream.socketWrite0(Native Method)",
                "at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:92)",
                "at java.net.SocketOutputStream.write(SocketOutputStream.java:136)",
                "at org.apache.activemq.transport.tcp.TcpBufferedOutputStream.flush(TcpBufferedOutputStream.java:115)",
                "at org.apache.activemq.transport.tcp.TcpTransport.oneway(TcpTransport.java:168)",
                "at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1205)",
                "at org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:790)",
                "at org.apache.activemq.broker.region.PrefetchSubscription.dispatch(PrefetchSubscription.java:647)",
                "at org.apache.activemq.broker.region.Queue.doActualDispatch(Queue.java:1548)",
                "at org.apache.activemq.broker.region.Queue.pageInMessages(Queue.java:1585)",
                "at org.apache.activemq.ActiveMQConnection.waitForTransportInterruptionProcessing(ActiveMQConnection.java:2248)",
                "at org.apache.activemq.ActiveMQSession.commit(ActiveMQSession.java:558)"
            ],
            "RootCause": "The root cause of the deadlock appears to be related to the synchronization mechanisms in the `TcpTransport` class, particularly in the `oneway` method, which is responsible for sending messages over the network. When an outstanding commit is in progress, it can block the dispatch of new messages, leading to a situation where threads are waiting indefinitely for resources that are held by other threads.",
            "StepsToReproduce": [
                "Set up an ActiveMQ broker with failover configuration.",
                "Create a scenario where transactions are being committed while the system experiences slow thread creation.",
                "Trigger a failover event during the transaction commit process."
            ],
            "ExpectedBehavior": "The system should handle failover gracefully without entering a deadlock state, allowing for message dispatch to continue even when transactions are in progress.",
            "ObservedBehavior": "The system enters a deadlock state where message dispatch is paused, and threads are unable to proceed due to outstanding commits blocking the necessary resources.",
            "Suggestions": "Review the synchronization logic in the `TcpTransport` class, particularly in the `oneway` method and related dispatch methods. Consider implementing a timeout mechanism for outstanding commits or redesigning the dispatch logic to allow for concurrent processing of messages during failover scenarios. Additionally, enhance logging around transaction commits to better diagnose similar issues in the future."
        }
    },
    {
        "filename": "AMQ-4643.json",
        "creation_time": "2013-07-19T13:39:19.000+0000",
        "bug_report": {
            "Title": "JDBCPersistence DB Shutdown During Message Send Causes JMSException Instead of Transport Connector Shutdown",
            "Description": "This issue relates to AMQ-4636, specifically addressing the behavior of the JDBCIOExceptionHandler when the underlying database is shut down during message sending. The scenario involves a producer sending a persistent message without a transaction while the JDBCIOExceptionHandler is configured. The expected behavior is that the transport connectors should shut down without reporting an IOException/SQLException to the producer. However, the current implementation sometimes results in an IOException/SQLException being sent back to the client before the transport connector is shut down.",
            "StackTrace": [
                "javax.jms.JMSException: Database 'target/derbydb_15' not found.",
                "at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:54)",
                "at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1391)",
                "at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1319)",
                "at org.apache.activemq.ActiveMQSession.send(ActiveMQSession.java:1809)",
                "at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:289)",
                "at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:224)",
                "at org.apache.activemq.store.jdbc.StopDBDuringProducerSendTopicTest.sendMessage(StopDBDuringProducerSendTopicTest.java:150)",
                "at org.apache.activemq.store.jdbc.StopDBDuringProducerSendTopicTest.testProducerWithDBShutdown(StopDBDuringProducerSendTopicTest.java:127)",
                "Caused by: java.sql.SQLException: Database 'target/derbydb_15' not found.",
                "at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source)",
                "at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)",
                "at org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(Unknown Source)",
                "at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Unknown Source)",
                "at org.apache.derby.jdbc.EmbeddedDataSource.getConnection(Unknown Source)",
                "at org.apache.activemq.store.jdbc.TransactionContext.getConnection(TransactionContext.java:68)"
            ],
            "RootCause": "The root cause of the issue is a failure to handle the SQLException that occurs when the database 'target/derbydb_15' is not found. This leads to a JMSException being thrown instead of gracefully shutting down the transport connectors.",
            "StepsToReproduce": [
                "1. Configure the JDBCIOExceptionHandler in ActiveMQ.",
                "2. Start the ActiveMQ broker and ensure the database 'target/derbydb_15' is accessible.",
                "3. Initiate a producer to send a persistent message.",
                "4. While the message is being sent, shut down the underlying database.",
                "5. Observe the behavior of the broker and the response to the producer."
            ],
            "ExpectedBehavior": "When the JDBCIOExceptionHandler is configured and the database is shut down during message sending, the transport connectors should shut down without reporting an IOException/SQLException to the producer.",
            "ObservedBehavior": "The broker sometimes sends an IOException/SQLException wrapped in a JMSException back to the client before shutting down the transport connectors.",
            "Suggestions": "To resolve this issue, ensure that the JDBCIOExceptionHandler properly handles the SQLException and triggers a shutdown of the transport connectors without sending an error back to the producer. Review the implementation of the 'doAddMessage' method in 'DefaultJDBCAdapter' and the 'getConnection' method in 'TransactionContext' to ensure proper exception handling and resource management."
        }
    },
    {
        "filename": "AMQ-2902.json",
        "creation_time": "2010-09-07T11:34:15.000+0000",
        "bug_report": {
            "Title": "ResourceAdapter logs confusing Exception upon pool connection disposal",
            "Description": "After upgrading to ActiveMQ version 5.4.0, numerous INFO level exceptions are logged, indicating that the transport connection has been disposed. The logged message is as follows:\n\n```\n2010-09-07 13:23:25,824 INFO  [org.apache.activemq.broker.TransportConnection.Transport] Transport failed: org.apache.activemq.transport.TransportDisposedIOException: Peer (vm://caa.embedded?waitForStart=300000&async=false#13) disposed.\norg.apache.activemq.transport.TransportDisposedIOException: Peer (vm://caa.embedded?waitForStart=300000&async=false#13) disposed.\n\tat org.apache.activemq.transport.vm.VMTransport.stop(VMTransport.java:159)\n\tat org.apache.activemq.transport.vm.VMTransportServer$1.stop(VMTransportServer.java:81)\n\tat org.apache.activemq.transport.TransportFilter.stop(TransportFilter.java:65)\n\tat org.apache.activemq.transport.TransportFilter.stop(TransportFilter.java:65)\n\tat org.apache.activemq.transport.ResponseCorrelator.stop(ResponseCorrelator.java:132)\n\tat org.apache.activemq.util.ServiceSupport.dispose(ServiceSupport.java:43)\n\tat org.apache.activemq.ActiveMQConnection.close(ActiveMQConnection.java:656)\n\tat org.apache.activemq.ra.ActiveMQManagedConnection.destroy(ActiveMQManagedConnection.java:207)\n\tat org.jboss.resource.connectionmanager.InternalManagedConnectionPool.doDestroy(InternalManagedConnectionPool.java:650)\n\tat org.jboss.resource.connectionmanager.InternalManagedConnectionPool.removeTimedOut(InternalManagedConnectionPool.java:481)\n\tat org.jboss.resource.connectionmanager.IdleRemover$IdleRemoverRunnable.run(IdleRemover.java:164)\n\tat java.lang.Thread.run(Thread.java:619)\n```\n\nWhile the message is logged at the INFO level, indicating it may not be critical, it is still confusing and could lead to misunderstandings regarding the health of the application.",
            "StackTrace": [
                "org.apache.activemq.transport.vm.VMTransport.stop(VMTransport.java:159)",
                "org.apache.activemq.transport.vm.VMTransportServer$1.stop(VMTransportServer.java:81)",
                "org.apache.activemq.transport.TransportFilter.stop(TransportFilter.java:65)",
                "org.apache.activemq.transport.ResponseCorrelator.stop(ResponseCorrelator.java:132)",
                "org.apache.activemq.util.ServiceSupport.dispose(ServiceSupport.java:43)",
                "org.apache.activemq.ActiveMQConnection.close(ActiveMQConnection.java:656)",
                "org.apache.activemq.ra.ActiveMQManagedConnection.destroy(ActiveMQManagedConnection.java:207)",
                "org.jboss.resource.connectionmanager.InternalManagedConnectionPool.doDestroy(InternalManagedConnectionPool.java:650)",
                "org.jboss.resource.connectionmanager.InternalManagedConnectionPool.removeTimedOut(InternalManagedConnectionPool.java:481)",
                "org.jboss.resource.connectionmanager.IdleRemover$IdleRemoverRunnable.run(IdleRemover.java:164)",
                "java.lang.Thread.run(Thread.java:619)"
            ],
            "RootCause": "The issue appears to stem from the resource management during the shutdown process of the ActiveMQ connection. The `dispose()` methods are being called as part of the cleanup process, which is expected behavior. However, the logging of these exceptions at the INFO level may be misleading, as they could be interpreted as errors by users.",
            "StepsToReproduce": [
                "Upgrade ActiveMQ to version 5.4.0.",
                "Run the application with an embedded broker within JBoss 4.2.3.",
                "Monitor the logs for INFO level messages related to transport connection disposal."
            ],
            "ExpectedBehavior": "No INFO level exceptions should be logged during the disposal of transport connections, or they should be logged in a way that clearly indicates they are not indicative of a failure.",
            "ObservedBehavior": "INFO level exceptions are logged, indicating that the transport connection has been disposed, which may confuse users regarding the application's state.",
            "Suggestions": "Consider modifying the logging level of the disposal messages to DEBUG or providing additional context in the log messages to clarify that these are expected behaviors during resource cleanup. Additionally, review the resource management logic in the `dispose()` methods to ensure that they are functioning as intended without causing unnecessary confusion."
        }
    },
    {
        "filename": "AMQ-5665.json",
        "creation_time": "2015-03-16T21:35:15.000+0000",
        "bug_report": {
            "Title": "MemoryTransactionStore causes NullPointerException for advisories in ActiveMQ 5.11.0",
            "Description": "In ActiveMQ version 5.11.0, a critical issue has been identified where advisories fail to fire due to a NullPointerException originating from the MemoryTransactionStore. This issue does not occur in version 5.10.2, indicating a regression introduced in 5.11.0. The problem arises when the addMessage method is called with a null context, leading to the failure of advisory messages to be delivered properly.",
            "StackTrace": [
                "java.lang.NullPointerException",
                "at org.apache.activemq.advisory.AdvisoryBroker.fireAdvisory(AdvisoryBroker.java:626)",
                "at org.apache.activemq.advisory.AdvisoryBroker.messageDelivered(AdvisoryBroker.java:397)",
                "at org.apache.activemq.broker.BrokerFilter.messageDelivered(BrokerFilter.java:349)",
                "at org.apache.activemq.broker.BrokerFilter.messageDelivered(BrokerFilter.java:349)",
                "at org.apache.activemq.broker.MutableBrokerFilter.messageDelivered(MutableBrokerFilter.java:360)",
                "at org.apache.activemq.broker.MutableBrokerFilter.messageDelivered(MutableBrokerFilter.java:360)",
                "at org.apache.activemq.broker.region.BaseDestination.messageDelivered(BaseDestination.java:518)",
                "at org.apache.activemq.broker.region.Queue.messageSent(Queue.java:1806)",
                "at org.apache.activemq.broker.region.Queue.doPendingCursorAdditions(Queue.java:794)",
                "at org.apache.activemq.broker.region.Queue.orderedCursorAdd(Queue.java:875)",
                "at org.apache.activemq.broker.region.Queue.doMessageSend(Queue.java:854)",
                "at org.apache.activemq.broker.region.Queue.send(Queue.java:733)",
                "at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:419)",
                "at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:468)",
                "at org.apache.activemq.broker.jmx.ManagedRegionBroker.send(ManagedRegionBroker.java:297)",
                "at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:152)",
                "at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96)",
                "at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:307)",
                "at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:157)",
                "at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:157)",
                "at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:541)",
                "at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:768)",
                "at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:334)",
                "at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:188)",
                "at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)",
                "at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)",
                "at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270)",
                "at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)",
                "at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214)",
                "at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196)",
                "at java.lang.Thread.run(Thread.java:724)"
            ],
            "RootCause": "The core issue is that the message being processed does not have a TransactionId, which leads to the MemoryTransactionStore's addMessages method falling through to addMessage with a null context, resulting in a NullPointerException.",
            "StepsToReproduce": [
                "Set up a non-persistent broker using ActiveMQ 5.11.0.",
                "Send messages that do not include a TransactionId.",
                "Observe the logs for warnings related to advisory messages failing to fire."
            ],
            "ExpectedBehavior": "Advisory messages should be delivered without errors, and no NullPointerException should occur during the message delivery process.",
            "ObservedBehavior": "Advisory messages fail to fire, and a NullPointerException is thrown, indicating that the advisory broker could not process the message due to a null context.",
            "Suggestions": "To resolve this issue, ensure that messages sent to the advisory broker include a valid TransactionId. Additionally, consider implementing a check in the MemoryTransactionStore's addMessages method to handle cases where the context is null, preventing the NullPointerException from occurring."
        }
    },
    {
        "filename": "AMQ-3725.json",
        "creation_time": "2012-02-17T18:57:21.000+0000",
        "bug_report": {
            "Title": "KahaDB Termination During SAN Failover Due to IOException Handling",
            "Description": "An issue arises with the KahaDB message broker when using a SAN (Storage Area Network) during failover scenarios. While the failover process is seamless, a subsequent failback introduces a 2-3 second delay during which writes are blocked, leading to broker termination. The JDBC datastore can handle similar situations using the IOExceptionHandler, but when applied to KahaDB, it prevents termination but results in an invalid index. This issue is critical as it affects message persistence and broker stability.",
            "StackTrace": [
                "ERROR | KahaDB failed to store to Journal",
                "java.io.SyncFailedException: sync failed",
                "\tat java.io.FileDescriptor.sync(Native Method)",
                "\tat org.apache.kahadb.journal.DataFileAppender.processQueue(DataFileAppender.java:382)",
                "\tat org.apache.kahadb.journal.DataFileAppender$2.run(DataFileAppender.java:203)",
                "ERROR | Checkpoint failed",
                "java.io.FileNotFoundException: /Volumes/NAS-01/data/kahadb/db-1.log (No such file or directory)",
                "\tat java.io.RandomAccessFile.open(Native Method)",
                "\tat java.io.RandomAccessFile.<init>(RandomAccessFile.java:216)",
                "\tat org.apache.kahadb.journal.DataFile.openRandomAccessFile(DataFile.java:70)",
                "\tat org.apache.kahadb.journal.DataFileAppender.processQueue(DataFileAppender.java:324)",
                "ERROR | Checkpoint failed",
                "java.io.IOException: Input/output error",
                "\tat java.io.RandomAccessFile.write(Native Method)",
                "\tat org.apache.kahadb.page.PageFile.writeBatch(PageFile.java:1006)",
                "\tat org.apache.kahadb.page.PageFile.flush(PageFile.java:484)",
                "\tat org.apache.activemq.store.kahadb.MessageDatabase.checkpointUpdate(MessageDatabase.java:1290)"
            ],
            "RootCause": "The root cause of the issue appears to be related to file synchronization failures and missing log files in KahaDB, likely due to misconfiguration or file system issues. The IOExceptionHandler does not function as intended in KahaDB, leading to broker termination and invalid index retention.",
            "StepsToReproduce": [
                "1. Configure KahaDB with a SAN setup.",
                "2. Initiate a failover on the SAN.",
                "3. Observe the broker's behavior during the failback process.",
                "4. Check for any exceptions in the logs related to KahaDB."
            ],
            "ExpectedBehavior": "The KahaDB should handle SAN failover and failback seamlessly without terminating the broker or retaining an invalid index. The IOExceptionHandler should allow for proper recovery without data loss.",
            "ObservedBehavior": "During the failback process, the broker terminates due to blocked writes and synchronization issues, leading to exceptions in the logs and an invalid index state in KahaDB.",
            "Suggestions": "1. Verify the file path and permissions for KahaDB log files to ensure they are accessible. \n2. Consider implementing a more robust IOExceptionHandler for KahaDB similar to the JDBC store. \n3. Review the SAN configuration and storage health to prevent file system issues. \n4. Test the failover and failback scenarios in a controlled environment to identify any additional edge cases."
        }
    },
    {
        "filename": "AMQ-3085.json",
        "creation_time": "2010-12-15T12:18:12.000+0000",
        "bug_report": {
            "Title": "IndexOutOfBoundsException on FailoverTransport.updateURIs after: already known: java.net.UnknownHostException",
            "Description": "The issue arises when the broker returns hosts that are not resolvable on the client, causing the update logic in the FailoverTransport to fail. This results in an IndexOutOfBoundsException when attempting to add URIs to a list in the FailoverTransport class. The current implementation tries to insert URIs at specific indices, which can lead to this exception if the list does not have enough elements. A workaround is to disable updates by setting updateURIsSupported=false on the failover URI, but ideally, the sending should also be disabled on the broker side.",
            "StackTrace": [
                "2010-12-10 07:48:16,574 [ActiveMQ Transport: tcp://xx:61616] DEBUG  failover.FailoverTransport:228 - Transport failed with the following exception:",
                "java.io.IOException: Unexpected error occurred",
                "at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:208) ~[activemq-core-5.4.1.jar:5.4.1-fuse-01-00]",
                "at java.lang.Thread.run(Thread.java:619) [na:1.6.0_12]",
                "Caused by: java.lang.IndexOutOfBoundsException: Index: 12, Size: 11",
                "at java.util.concurrent.CopyOnWriteArrayList.add(CopyOnWriteArrayList.java:409) ~[na:1.6.0_12]",
                "at org.apache.activemq.transport.failover.FailoverTransport.add(FailoverTransport.java:613) ~[activemq-core-5.4.1.jar:5.4.1-fuse-01-00]",
                "at org.apache.activemq.transport.failover.FailoverTransport.updateURIs(FailoverTransport.java:1046) ~[activemq-core-5.4.1.jar:5.4.1-fuse-01-00]",
                "at org.apache.activemq.transport.failover.FailoverTransport.processNewTransports(FailoverTransport.java:285) ~[activemq-core-5.4.1.jar:5.4.1-fuse-01-00]",
                "at org.apache.activemq.transport.failover.FailoverTransport.handleConnectionControl(FailoverTransport.java:265) ~[activemq-core-5.4.1.jar:5.4.1-fuse-01-00]",
                "at org.apache.activemq.transport.failover.FailoverTransport$3.onCommand(FailoverTransport.java:177) ~[activemq-core-5.4.1.jar:5.4.1-fuse-01-00]",
                "at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) ~[activemq-core-5.4.1.jar:5.4.1-fuse-01-00]",
                "at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:228) ~[activemq-core-5.4.1.jar:5.4.1-fuse-01-00]",
                "at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) ~[activemq-core-5.4.1.jar:5.4.1-fuse-01-00]",
                "at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:219) ~[activemq-core-5.4.1.jar:5.4.1-fuse-01-00]",
                "at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:201) ~[activemq-core-5.4.1.jar:5.4.1-fuse-01-00]"
            ],
            "RootCause": "The root cause of the issue is an IndexOutOfBoundsException occurring in the add method of the FailoverTransport class. This happens when the method attempts to insert URIs at specific indices in a CopyOnWriteArrayList that does not have enough elements, leading to an attempt to access an index that is out of bounds.",
            "StepsToReproduce": [
                "1. Configure the ActiveMQ client to connect to a broker with known hosts.",
                "2. Simulate a scenario where the broker returns hosts that are not resolvable.",
                "3. Observe the logs for the IndexOutOfBoundsException in the FailoverTransport class."
            ],
            "ExpectedBehavior": "The FailoverTransport should handle the addition of URIs gracefully without throwing an IndexOutOfBoundsException, even when the broker returns non-resolvable hosts.",
            "ObservedBehavior": "An IndexOutOfBoundsException is thrown when the FailoverTransport attempts to add URIs at specific indices in the list, causing the transport to fail.",
            "Suggestions": "Refactor the add method in the FailoverTransport class to append URIs to the list instead of inserting them at specific indices. This change will prevent the IndexOutOfBoundsException from occurring. Additionally, consider implementing a mechanism to disable sending on the broker side when non-resolvable hosts are detected."
        }
    },
    {
        "filename": "AMQ-3504.json",
        "creation_time": "2011-09-19T14:33:49.000+0000",
        "bug_report": {
            "Title": "NullPointerException on WebSocket Connection in StompServlet",
            "Description": "When connecting to the ActiveMQ server using WebSockets from Chrome or Firefox 6, a NullPointerException is thrown in the doGet method of the StompServlet class. This issue does not occur in Firefox 5 or Safari, suggesting a potential incompatibility with the WebSocket implementation in newer browser versions. The stack trace indicates that the exception occurs at line 51 of StompServlet.java.",
            "StackTrace": [
                "java.lang.NullPointerException",
                "at org.apache.activemq.transport.ws.StompServlet.doGet(StompServlet.java:51)",
                "at javax.servlet.http.HttpServlet.service(HttpServlet.java:693)",
                "at org.eclipse.jetty.websocket.WebSocketServlet.service(WebSocketServlet.java:73)",
                "at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:527)",
                "at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:423)",
                "at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223)",
                "at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:930)",
                "at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:358)",
                "at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:183)",
                "at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:866)",
                "at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117)",
                "at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:113)",
                "at org.eclipse.jetty.server.Server.handle(Server.java:351)",
                "at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:594)",
                "at org.eclipse.jetty.server.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:1042)",
                "at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:549)",
                "at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:211)",
                "at org.eclipse.jetty.server.HttpConnection.handle(HttpConnection.java:424)",
                "at org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint.run(SocketConnector.java:241)",
                "at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:436)",
                "at java.lang.Thread.run(Thread.java:680)"
            ],
            "RootCause": "The NullPointerException in the doGet method of StompServlet is likely caused by accessing a method or property of a null object. This could be due to uninitialized request parameters or attributes, or improperly initialized response objects.",
            "StepsToReproduce": [
                "1. Use Chrome or Firefox 6 to connect to the ActiveMQ server via WebSockets.",
                "2. Observe the server logs for the NullPointerException in the StompServlet."
            ],
            "ExpectedBehavior": "The WebSocket connection should be established successfully without throwing any exceptions.",
            "ObservedBehavior": "A NullPointerException is thrown in the doGet method of StompServlet when attempting to establish a WebSocket connection.",
            "Suggestions": "To resolve this issue, the following steps are recommended: \n1. Review the doGet method in StompServlet.java (line 51) to identify which object is null. \n2. Ensure that all request parameters are being correctly passed and are not null. \n3. Verify that any objects being used in the doGet method are properly initialized before use. \n4. Implement null checks and logging to identify the specific object causing the NullPointerException."
        }
    },
    {
        "filename": "AMQ-6707.json",
        "creation_time": "2017-06-19T11:29:47.000+0000",
        "bug_report": {
            "Title": "JDBC XA: Could not remove prepared transaction state from message",
            "Description": "When ActiveMQ 5.14.5 is configured with JDBC persistence storage (Postgres), an error occurs intermittently during transaction commits. The error message indicates a failure to remove the prepared transaction state, leading to a rollback. This issue has been observed in production environments and is critical for maintaining message integrity and system reliability.",
            "StackTrace": [
                "2017-06-15 01:41:37,418 | ERROR | enerContainer-21 | CommitTask | 67 - org.apache.aries.transaction.manager - 1.3.1 | Unexpected exception committing org.apache.geronimo.transaction.manager.WrapperNamedXAResource@34ac9d62; continuing to commit other RMs",
                "javax.transaction.xa.XAException: STORE COMMIT FAILED: Transaction rolled back xaErrorCode:104",
                "at org.apache.activemq.TransactionContext.toXAException(TransactionContext.java:793)",
                "at org.apache.activemq.TransactionContext.commit(TransactionContext.java:622)",
                "at org.apache.geronimo.transaction.manager.WrapperNamedXAResource.commit(WrapperNamedXAResource.java:54)",
                "at org.apache.geronimo.transaction.manager.CommitTask.run(CommitTask.java:64)",
                "at org.apache.geronimo.transaction.manager.TransactionImpl.commitResources(TransactionImpl.java:688)",
                "at org.apache.geronimo.transaction.manager.TransactionImpl.commit(TransactionImpl.java:327)",
                "at org.apache.geronimo.transaction.manager.TransactionManagerImpl.commit(TransactionManagerImpl.java:252)",
                "at org.springframework.transaction.jta.JtaTransactionManager.doCommit(JtaTransactionManager.java:1020)",
                "at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:761)",
                "at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:730)",
                "at org.apache.aries.transaction.internal.AriesPlatformTransactionManager.commit(AriesPlatformTransactionManager.java:75)",
                "at sun.reflect.GeneratedMethodAccessor180.invoke(Unknown Source)",
                "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
                "at java.lang.reflect.Method.invoke(Method.java:498)",
                "at com.ectsp.spring.osgi.PlatformTransactionManagerFactoryBean$ProxyTxManagerHandler.invoke(PlatformTransactionManagerFactoryBean.java:115)",
                "at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:245)",
                "at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1164)",
                "at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1156)",
                "at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:1053)",
                "at java.lang.Thread.run(Thread.java:748)",
                "Caused by: javax.transaction.xa.XAException: STORE COMMIT FAILED: Transaction rolled back xaErrorCode:104",
                "at org.apache.activemq.transaction.Transaction.newXAException(Transaction.java:212)",
                "at org.apache.activemq.transaction.XATransaction.storeCommit(XATransaction.java:93)",
                "at org.apache.activemq.transaction.XATransaction.commit(XATransaction.java:76)",
                "at org.apache.activemq.broker.TransactionBroker.commitTransaction(TransactionBroker.java:252)",
                "at org.apache.activemq.broker.MutableBrokerFilter.commitTransaction(MutableBrokerFilter.java:118)",
                "at org.apache.activemq.broker.MutableBrokerFilter.commitTransaction(MutableBrokerFilter.java:118)",
                "at org.apache.activemq.broker.TransportConnection.processCommitTransactionTwoPhase(TransportConnection.java:547)",
                "at org.apache.activemq.command.TransactionInfo.visit(TransactionInfo.java:102)",
                "at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:336)",
                "at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:200)",
                "at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)",
                "at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:125)",
                "at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:301)",
                "at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)",
                "at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:233)",
                "at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:215)",
                "at java.lang.Thread.run(Thread.java:745)",
                "Caused by: java.io.IOException: Could not remove prepared transaction state from message add for sequenceId: 4025171",
                "at org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter.doCommitAddOp(DefaultJDBCAdapter.java:1031)",
                "at org.apache.activemq.store.jdbc.JDBCPersistenceAdapter.commitAdd(JDBCPersistenceAdapter.java:780)",
                "at org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore$CommitAddOutcome.run(JdbcMemoryTransactionStore.java:146)",
                "at org.apache.activemq.store.memory.MemoryTransactionStore$Tx.commit(MemoryTransactionStore.java:101)",
                "at org.apache.activemq.store.memory.MemoryTransactionStore.commit(MemoryTransactionStore.java:270)",
                "at org.apache.activemq.transaction.XATransaction.storeCommit(XATransaction.java:86)"
            ],
            "RootCause": "The root cause of the issue appears to be related to the transaction management system failing to commit due to an inability to remove the prepared transaction state from the message store. This could be attributed to database connectivity issues, transaction timeouts, or misconfigurations in the JDBC persistence adapter.",
            "StepsToReproduce": [
                "Configure ActiveMQ 5.14.5 with JDBC persistence storage using Postgres.",
                "Send multiple messages through the system to create transactions.",
                "Monitor the logs for errors related to transaction commits."
            ],
            "ExpectedBehavior": "Transactions should commit successfully without errors, ensuring that the prepared transaction state is removed from the message store.",
            "ObservedBehavior": "Intermittent failures during transaction commits, resulting in rollback and error messages indicating that the prepared transaction state could not be removed.",
            "Suggestions": "Investigate the database connection settings and transaction timeout configurations. Ensure that the JDBC adapter is correctly configured and that the database is capable of handling the transaction load. Consider upgrading to a newer version of ActiveMQ if available, as this issue may have been addressed in subsequent releases."
        }
    },
    {
        "filename": "AMQ-5384.json",
        "creation_time": "2014-10-06T09:26:58.000+0000",
        "bug_report": {
            "Title": "Deadlock on DB connections in JDBCMessageStore.removeMessage",
            "Description": "ActiveMQ 5.9 experiences deadlocks under load (30-50 requests per second) when using JDBC persistence. This issue manifests during performance testing, causing the application to hang. The deadlock occurs due to improper handling of database connections in the `removeMessage` method of the `JDBCMessageStore` class, which leads to multiple connections being opened within the same transaction context.",
            "StackTrace": [
                "2014-10-06 08:44:40,646 | INFO  | Logging the stack trace by which the overdue resource was checked-out. | com.mchange.v2.resourcepool.BasicResourcePool | C3P0PooledConnectionPoolManager[identityToken->2x1e6s941raztn6mju110",
                "java.lang.Exception: DEBUG STACK TRACE: Overdue resource check-out stack trace.",
                "at com.mchange.v2.resourcepool.BasicResourcePool.checkoutResource(BasicResourcePool.java:555)",
                "at com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.checkoutAndMarkConnectionInUse(C3P0PooledConnectionPool.java:756)",
                "at com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.checkoutPooledConnection(C3P0PooledConnectionPool.java:683)",
                "at com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getConnection(AbstractPoolBackedDataSource.java:140)",
                "at org.apache.activemq.store.jdbc.TransactionContext.getConnection(TransactionContext.java:58)",
                "at org.apache.activemq.store.jdbc.TransactionContext.begin(TransactionContext.java:163)",
                "at org.apache.activemq.store.jdbc.JDBCPersistenceAdapter.beginTransaction(JDBCPersistenceAdapter.java:510)",
                "at org.apache.activemq.store.memory.MemoryTransactionStore$Tx.commit(MemoryTransactionStore.java:92)",
                "at org.apache.activemq.store.memory.MemoryTransactionStore.commit(MemoryTransactionStore.java:259)",
                "at org.apache.activemq.transaction.XATransaction.storeCommit(XATransaction.java:85)",
                "at org.apache.activemq.transaction.XATransaction.commit(XATransaction.java:75)",
                "at org.apache.activemq.broker.TransactionBroker.commitTransaction(TransactionBroker.java:253)",
                "at org.apache.activemq.broker.MutableBrokerFilter.commitTransaction(MutableBrokerFilter.java:112)",
                "at org.apache.activemq.broker.TransportConnection.processCommitTransactionTwoPhase(TransportConnection.java:433)",
                "at org.apache.activemq.command.TransactionInfo.visit(TransactionInfo.java:102)",
                "at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:292)",
                "at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:149)",
                "at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)",
                "at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)",
                "at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270)",
                "at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)",
                "at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214)",
                "at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196)",
                "at java.lang.Thread.run(Thread.java:662)"
            ],
            "RootCause": "The deadlock occurs because the `removeMessage` method in `JDBCMessageStore` attempts to create a new database connection while already holding one in the `ConnectionContext`. This leads to a situation where all available connections are exhausted, preventing the method from acquiring the necessary connection to proceed.",
            "StepsToReproduce": [
                "Set up ActiveMQ 5.9 with JDBC persistence using Oracle 11.2 and C3P0 as the connection pool.",
                "Generate a load of 30-50 requests per second to the ActiveMQ broker.",
                "Monitor the application for deadlocks or hangs during performance testing."
            ],
            "ExpectedBehavior": "The ActiveMQ broker should handle multiple requests without deadlocking, efficiently managing database connections and transactions.",
            "ObservedBehavior": "The ActiveMQ broker hangs during performance testing due to deadlocks on database connections, leading to a failure in processing requests.",
            "Suggestions": "Refactor the `removeMessage` method to pass the existing `ConnectionContext` to the `persistenceAdapter.getStoreSequenceIdForMessageId` method. This change will allow the method to reuse the same database connection, preventing the exhaustion of available connections and avoiding deadlocks."
        }
    },
    {
        "filename": "AMQ-5783.json",
        "creation_time": "2015-05-20T08:47:56.000+0000",
        "bug_report": {
            "Title": "EOFException in KahaDB during Offline Durable Subscriber Timeout",
            "Description": "When an offline durable subscriber times out (as configured by offlineDurableSubscriberTimeout), a WARNING message is logged indicating a failure to browse the topic. The error message is as follows:\n\n```\n2015-05-13 13:45:08,472 [sage] Scheduler] - WARN  Topic                          - Failed to browse Topic: XXXXX\njava.io.EOFException: Chunk stream does not exist, page: 39 is marked free\n\tat org.apache.activemq.store.kahadb.disk.page.Transaction$2.readPage(Transaction.java:470)\n\tat org.apache.activemq.store.kahadb.disk.page.Transaction$2.<init>(Transaction.java:447)\n\tat org.apache.activemq.store.kahadb.disk.page.Transaction.openInputStream(Transaction.java:444)\n\tat org.apache.activemq.store.kahadb.disk.page.Transaction.load(Transaction.java:420)\n\tat org.apache.activemq.store.kahadb.disk.page.Transaction.load(Transaction.java:377)\n\tat org.apache.activemq.store.kahadb.disk.index.BTreeIndex.loadNode(BTreeIndex.java:266)\n\tat org.apache.activemq.store.kahadb.disk.index.BTreeIndex.getRoot(BTreeIndex.java:174)\n\tat org.apache.activemq.store.kahadb.disk.index.BTreeIndex.iterator(BTreeIndex.java:236)\n\tat org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex$MessageOrderIterator.<init>(MessageDatabase.java:3033)\n\tat org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex.iterator(MessageDatabase.java:2985)\n\tat org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$4.execute(KahaDBStore.java:564)\n\tat org.apache.activemq.store.kahadb.disk.page.Transaction.execute(Transaction.java:779)\n\tat org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore.recover(KahaDBStore.java:558)\n\tat org.apache.activemq.store.ProxyTopicMessageStore.recover(ProxyTopicMessageStore.java:62)\n\tat org.apache.activemq.broker.region.Topic.doBrowse(Topic.java:589)\n\tat org.apache.activemq.broker.region.Topic.access$100(Topic.java:65)\n\tat org.apache.activemq.broker.region.Topic$6.run(Topic.java:722)\n\tat org.apache.activemq.thread.SchedulerTimerTask.run(SchedulerTimerTask.java:33)\n\tat java.util.TimerThread.mainLoop(Timer.java:555)\n\tat java.util.TimerThread.run(Timer.java:505)\n```\nThis indicates a potential issue with the KahaDB database, possibly due to corruption or inconsistency.",
            "StackTrace": [
                "java.io.EOFException: Chunk stream does not exist, page: 39 is marked free",
                "at org.apache.activemq.store.kahadb.disk.page.Transaction$2.readPage(Transaction.java:470)",
                "at org.apache.activemq.store.kahadb.disk.page.Transaction$2.<init>(Transaction.java:447)",
                "at org.apache.activemq.store.kahadb.disk.page.Transaction.openInputStream(Transaction.java:444)",
                "at org.apache.activemq.store.kahadb.disk.page.Transaction.load(Transaction.java:420)",
                "at org.apache.activemq.store.kahadb.disk.page.Transaction.load(Transaction.java:377)",
                "at org.apache.activemq.store.kahadb.disk.index.BTreeIndex.loadNode(BTreeIndex.java:266)",
                "at org.apache.activemq.store.kahadb.disk.index.BTreeIndex.getRoot(BTreeIndex.java:174)",
                "at org.apache.activemq.store.kahadb.disk.index.BTreeIndex.iterator(BTreeIndex.java:236)",
                "at org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex$MessageOrderIterator.<init>(MessageDatabase.java:3033)",
                "at org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex.iterator(MessageDatabase.java:2985)",
                "at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$4.execute(KahaDBStore.java:564)",
                "at org.apache.activemq.store.kahadb.disk.page.Transaction.execute(Transaction.java:779)",
                "at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore.recover(KahaDBStore.java:558)",
                "at org.apache.activemq.store.ProxyTopicMessageStore.recover(ProxyTopicMessageStore.java:62)",
                "at org.apache.activemq.broker.region.Topic.doBrowse(Topic.java:589)",
                "at org.apache.activemq.broker.region.Topic.access$100(Topic.java:65)",
                "at org.apache.activemq.broker.region.Topic$6.run(Topic.java:722)",
                "at org.apache.activemq.thread.SchedulerTimerTask.run(SchedulerTimerTask.java:33)",
                "at java.util.TimerThread.mainLoop(Timer.java:555)",
                "at java.util.TimerThread.run(Timer.java:505)"
            ],
            "RootCause": "The EOFException occurs in the `Transaction$2.readPage` method when attempting to read a page that is marked as free in the KahaDB storage. This suggests a potential issue with the KahaDB database, possibly due to corruption or inconsistency.",
            "StepsToReproduce": [
                "Configure an offline durable subscriber with a timeout.",
                "Allow the subscriber to time out.",
                "Monitor the logs for WARNING messages related to topic browsing."
            ],
            "ExpectedBehavior": "The system should handle the timeout gracefully without logging errors or exceptions.",
            "ObservedBehavior": "A WARNING message is logged indicating a failure to browse the topic due to an EOFException.",
            "Suggestions": "Investigate the KahaDB storage for potential corruption. Consider implementing additional checks to ensure that pages are not marked as free when they are still in use. Review the handling of offline durable subscribers to ensure that timeouts do not lead to inconsistent states."
        }
    },
    {
        "filename": "AMQ-2965.json",
        "creation_time": "2010-10-07T20:18:59.000+0000",
        "bug_report": {
            "Title": "ActiveMQ Fails to Start Due to Unresolvable Hostname",
            "Description": "ActiveMQ is installed on a physical server with two Ethernet interfaces: one for external traffic (10.x.x.x) and another for internal communication (172.x.x.x). ActiveMQ is configured to listen only on the internal interface (172.x.x.x). However, the hostname 'Q01M0003' cannot be resolved due to the absence of internal DNS resolution, leading to startup failures. The following exceptions and stack trace were generated during the startup attempt:\n\n{panel}\n2010-06-09 16:48:45,714 | ERROR | Failed to resolve localhost | org.apache.activemq.broker.BrokerService | WrapperSimpleAppMain \n...\njava.net.UnknownHostException: Q01M0003: Q01M0003 \n        at java.net.InetAddress.getLocalHost(Unknown Source) \n        at org.apache.activemq.util.IdGenerator.<clinit>(IdGenerator.java:52) \n...\nCaused by: java.net.UnknownHostException: Q01M0003: Q01M0003 \n        at java.net.InetAddress.getLocalHost(Unknown Source) \n        at org.apache.activemq.transport.tcp.TcpTransportServer.resolveHostName(TcpTransportServer.java:336) \n...\nThis issue can be temporarily resolved by adding entries to the /etc/hosts file for each machine, but this is not a scalable solution in large environments.",
            "StackTrace": [
                "java.net.UnknownHostException: Q01M0003: Q01M0003",
                "at java.net.InetAddress.getLocalHost(Unknown Source)",
                "at org.apache.activemq.util.IdGenerator.<clinit>(IdGenerator.java:52)",
                "at org.apache.activemq.broker.region.RegionBroker.<clinit>(RegionBroker.java:75)",
                "at org.apache.activemq.broker.BrokerService.createRegionBroker(BrokerService.java:1734)",
                "at org.apache.activemq.broker.BrokerService.createBroker(BrokerService.java:1688)",
                "at org.apache.activemq.broker.BrokerService.start(BrokerService.java:469)",
                "at org.apache.activemq.xbean.XBeanBrokerService.afterPropertiesSet(XBeanBrokerService.java:85)",
                "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                "at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1414)",
                "at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1335)",
                "at org.apache.activemq.console.command.StartCommand.startBroker(StartCommand.java:115)",
                "at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)"
            ],
            "RootCause": "The root cause of the issue is the inability of the ActiveMQ broker to resolve the hostname 'Q01M0003' due to the lack of internal DNS resolution. The system attempts to resolve the hostname using the method InetAddress.getLocalHost(), which fails and throws an UnknownHostException.",
            "StepsToReproduce": [
                "Install ActiveMQ on a server with two Ethernet interfaces.",
                "Configure ActiveMQ to listen only on the internal interface (172.x.x.x).",
                "Ensure that there is no internal DNS resolution for hostnames.",
                "Attempt to start ActiveMQ."
            ],
            "ExpectedBehavior": "ActiveMQ should start successfully and be able to resolve its hostname without errors.",
            "ObservedBehavior": "ActiveMQ fails to start, throwing an UnknownHostException due to the unresolvable hostname 'Q01M0003'.",
            "Suggestions": "To resolve this issue, consider the following options:\n1. Add entries for each machine in the /etc/hosts file to enable hostname resolution. However, this is not recommended for large environments due to maintenance overhead.\n2. Implement an internal DNS solution to manage hostname resolution effectively.\n3. Modify the ActiveMQ configuration to use IP addresses instead of hostnames where possible."
        }
    }
]